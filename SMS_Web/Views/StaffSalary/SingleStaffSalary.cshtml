@model SMS_DAL.StaffSalary

@{
    ViewBag.Title = "Create";
}

<style>
    /*body {
        padding: 10px;
    }*/

    #exTab1 .tab-content {
        color: #73879c;
        background-color: white;
        padding: 5px 15px;
    }

    #exTab2 h3 {
        color: white;
        background-color: #428bca;
        padding: 5px 15px;
    }

    /* remove border radius for the tab */

    #exTab1 .nav-pills > li > a {
        border-radius: 0;
    }

    /* change border radius for the tab , apply corners on top*/

    #exTab3 .nav-pills > li > a {
        border-radius: 4px 4px 0 0;
    }

    #exTab3 .tab-content {
        color: white;
        background-color: #428bca;
        padding: 5px 15px;
    }

    .boxed {
        border: 1px solid #DDDDDD;
        margin-left: -15px;
        margin-right: -15px;
        height: 320px;
    }

    .nav-boxed {
        border: 1px solid #DDDDDD;
    }

    .padded-ends {
        padding-left: 20px;
        padding-right: 20px;
        /*margin-right:20px;*/
    }
</style>


<script>
    var staffNames = [];
    function populateErrors()
    {
        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification('Staff is saved succesfully.', 'Success', 'Success') </text>
           }
       else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Staff is already added.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification(' Unable to Save Staff.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 1420)
           {
               <text> showNotification('Unable to Search Staff Salary.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Staff.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification(' Staff is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
    }


    window.onload = function (e) {
        ShowSearchPanel(@((Model == null) ? 0 : 1));
        populateErrors();
        GetStaffNames();
        SetPaidAmount();
        ChangeAccountType();
        var d = new Date();
        var month = d.getMonth();
        $("#monthIdSearch").get(0).selectedIndex = month;

        $('#paidDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');
        autocomplete(document.getElementById("StaffNameId"), staffNames);

        $('#classTable').DataTable();
    }

    function GetStaffNames() {
        var i = 0;
        @foreach (var item in ViewBag.StaffNames)
        {
            <text>
        var name = '@item';
        staffNames[i++] = name;
        </text>
        }
    }

    function VerifyStaffId()
    {
        var flag = true;
        var salaryAmount = $("#StaffNameId").val();

        if(salaryAmount == null || salaryAmount.length == 0)
        {
            showNotification('Please Enter Staff Id.', 'Error', 'Error');
            flag = false;
        }

        return flag;
    }

    function ConfirmSaveSalary(unPaid)
    {
        var message = 'Are you sure, You want to pay Staff Salary?';
        var buttonId = 'paidSalary';
        if(unPaid == 1)
        {
            $("#UnPaid").val(1);
            buttonId = 'unpaidSalary';
            message = 'Are you sure, You want to Unpaid Staff Salary?';
        }
        getStaffPaymentApproval('@((Model == null || Model.Staff == null) ? 0 : Model.Staff.StaffId)',message, buttonId);
        return false;
    }

    function SetPaidAmount()
    {
        var salaryAmount = parseInt($("#salaryAmount").val());
        var miscWithdraws = parseInt($("#miscWithdraw").val());
        var sundayDeduction = parseInt($("#sundayDeduction").val());
        var deduction = parseInt($("#deduction").val());
        var advance = parseInt($("#adavnaceAdjust").val());
        var bonus = parseInt($("#bonus").val());
        if (isNaN(sundayDeduction)) sundayDeduction = 0;
        if (isNaN(deduction)) deduction = 0;
        if (isNaN(advance)) advance = 0;
        if (isNaN(bonus)) bonus = 0;
        var paidAmount = salaryAmount + bonus;
        paidAmount = paidAmount - sundayDeduction - deduction - advance - miscWithdraws;

        $("#paidAmount").val(paidAmount);
    }

    function ChangeAccountType()
    {
        var accountTypeId = $("#accountTypeId").val();
        var branchId = $("#BranchId").val();
        if(accountTypeId == 1)
        {
            accountTypeId = 13;
        }
        else
        {
            accountTypeId = 14;
        }

        $.ajax({
            type: "GET",
            url: AppDetail() + '/api/Common/getFinanceAccount?typeId=' + accountTypeId + '&&branchId=' + branchId + '&&isLoadAll=0',
            contentType: 'application/json',
            success: function (result) {
                $("#financeAccountId").html(result);
            },
            error: function (res) {
                showNotification('Unable to load account', 'Error', 'Error')
            }
        });
    }

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>


<style>
    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }
    
    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>


<div class="row" >
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">

            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Pay Staff Salary</label>
                <ul class="nav navbar-right panel_toolbox">

                    <li>
                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
                    </li>
                    <li>
                        @*<a class="close-link"><i class="fa fa-close"></i></a>*@
                    </li>

                </ul>

                <div class="clearfix"></div>
            </div>

            <div class="x_content">


                @using (Html.BeginForm("SearchSingleStaffSalary", "StaffSalary", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <fieldset>
                        <div class="form-group row">
                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Year
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    @Html.DropDownList("YearId", (IEnumerable<SelectListItem>)ViewBag.YearId, new { @class = "form-control input-sm", id = "yearIdSearch", @style = "height:30px;" })
                                    @*@Html.ValidationMessageFor(model => model.SectionId)*@

                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Month
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    @Html.DropDownList("MonthId", (IEnumerable<SelectListItem>)ViewBag.MonthId, new { @class = "form-control input-sm", id = "monthIdSearch", @style = "height:30px;" })
                                    @*@Html.ValidationMessageFor(model => model.SectionId)*@

                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Staff Id
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    <input type="text" id="StaffNameId" name="StaffId" class="form-control input-sm" />
                                </div>
                            </div>
                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="nav navbar-right">
                                <input type="submit" value="Find" name="Search" onclick="return VerifyStaffId()" class="btn btn-squar" />

                            </div>
                        </div>
                    </fieldset>
                }
            </div>
        </div>
    </div>
</div>

<div class="row" id="searchPanelData" style="display:none;">
    <div class="col-md-12 col-sm-12 col-xs-12">
        @using (Html.BeginForm("SaveSingleStaffSalary", "StaffSalary", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <fieldset>
                <div class="x_panel" id="panel1">
                    <div class="x_title sc_panel_header">
                        <label class="nav navbar-left control-label sc_panel_label" align="left">Salary Details </label>


                        <label class="nav control-label col-md-3 col-sm-3 col-xs-12" align="right" style="font-size: 11px;margin-top:5px;" for="last-name">
                            Pay To
                        </label>

                        <div class="nav col-md-2 col-sm-2 col-xs-12" style="margin-top:2px;">
                            <div>
                                @Html.DropDownList("AccountTypeId", (IEnumerable<SelectListItem>)ViewBag.AccountTypeId, new { @class = "form-control input-sm", @onchange = "ChangeAccountType()", id = "accountTypeId" })
                            </div>
                        </div>

                        <div class="nav col-md-2 col-sm-2 col-xs-12" style="margin-top:2px;">
                            <div>
                                <select class="form-control input-sm" name="FinanceAccountId" id="financeAccountId"></select>
                            </div>
                        </div>


                        <label class="nav control-label col-md-1 col-sm-1 col-xs-12" align="right" style="font-size: 11px;margin-top:5px;" for="last-name">
                            Paid Date
                        </label>

                        <div class="nav col-md-2 col-sm-2 col-xs-12" style="margin-top:2px;">
                            <div>
                                <input type="date" name="PaidDate" class="form-control input-sm" id="paidDate">
                                <input type="hidden" name="BranchId" class="form-control input-sm" id="BranchId" value="@ViewData["branchId"]">
                            </div>
                        </div>


                    </div>

                    <div class="x_content">

                        <div class="row">


                            <div class="col-md-12" style="padding-right: 20px; padding-left: 20px; height: inherit;" id="div2">


                                <div class="form-group col-md-4">

                                    <div class="row">

                                        <label class="nav control-label col-md-3 col-sm-3 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Staff Id
                                        </label>

                                        <div class="nav col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" value="@(Model == null ? 0 : Model.Staff.StaffId)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-3 col-sm-3 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Name
                                        </label>

                                        <div class="nav col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" value="@(Model == null ? "" : Model.Staff.Name)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                    </div>
                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-3 col-sm-3 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Phone No
                                        </label>

                                        <div class="nav col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" value="@(Model == null ? "" : Model.Staff.PhoneNumber)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-3 col-sm-3 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Month
                                        </label>

                                        <div class="nav col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" value="@(Model == null ? "" : Model.ForMonth)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                    </div>

                                </div>


                                <div class="form-group col-md-2">

                                    <div class="row">

                                        <label class="nav control-label col-md-4 col-sm-4 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Total Hours
                                        </label>

                                        <div class="nav col-md-8 col-sm-8 col-xs-12">
                                            <div>
                                                <input type="text" name="TotalHrs" value="@(Model == null ? 0 : Model.TotalHours)" style="background-color: white" class="form-control input-sm" readonly="readonly" id="TotalHrs">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-4 col-sm-4 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Working Hours
                                        </label>

                                        <div class="nav col-md-8 col-sm-8 col-xs-12">
                                            <div>
                                                <input type="text" name="WrkHrs" id="WrkHrs" value="@(Model == null ? 0 : Model.WorkingHours)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-4 col-sm-4 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Short Hours
                                        </label>

                                        <div class="nav col-md-8 col-sm-8 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" id="ShortHrs" value="@(Model == null ? 0 : Model.ShortHours)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-4 col-sm-4 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Bonus Days
                                        </label>

                                        <div class="nav col-md-8 col-sm-8 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" id="BonusDays" value="@(Model == null ? 0 : Model.BonusDays)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="form-group col-md-6">
                                    
                                    <div class="row">

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Salary
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="text" name="SalaryAmount" value="@(Model == null ? 0 : Model.SalaryAmount)" style="background-color: white" class="form-control input-sm" readonly="readonly" id="salaryAmount">
                                            </div>
                                        </div>

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Deduction
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="number" name="Deduction" onchange="SetPaidAmount()" id="deduction" value="@(Model == null ? 0 : Model.Deduction)" style="background-color: white" class="form-control input-sm">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Misc Withdraws
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="text" name="MiscWithdraw" id="miscWithdraw" value="@(Model == null ? 0 : Model.MiscWithdraw)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Advance Adjustment
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="number" name="AdvanceAdjustment" onchange="SetPaidAmount()" id="adavnaceAdjust" value="@(Model == null ? 0 : Model.AdvanceAdjustment)" style="background-color: white" class="form-control input-sm">
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Clubbed Sundays
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="text" name="Class" id="clubbedSunday" value="@(Model == null ? 0 : Model.ClubbedSundays)" style="background-color: white" class="form-control input-sm" readonly="readonly">
                                            </div>
                                        </div>

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Bonus
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="number" name="Bonus" onchange="SetPaidAmount()" id="bonus" value="@(Model == null ? 0 : Model.Bonus)" style="background-color: white" class="form-control input-sm">
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" style="margin-top:10px;">

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Sunday(s) Deduction
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="number" name="SundaysDeduction" onchange="SetPaidAmount()" id="sundayDeduction" value="@(Model == null ? 0 : Model.SundaysDeduction)" style="background-color: white" class="form-control input-sm">
                                            </div>
                                        </div>

                                        <label class="nav control-label col-md-2 col-sm-2 col-xs-12" align="left" style="font-size: 11px;" for="last-name">
                                            Salary Paid
                                        </label>

                                        <div class="nav col-md-4 col-sm-4 col-xs-12">
                                            <div>
                                                <input type="number" name="PaidAmount" onchange="SetPaidAmount()" value="@(Model == null ? 0 : Model.PaidAmount)" style="background-color:lightgray;font-size:20px;font-style:oblique;text-decoration:solid;color:black" class="form-control input-sm" id="paidAmount" readonly>
                                                <input type="hidden" name="StaffId" value="@(Model == null ? 0 : Model.StaffId)">
                                                <input type="hidden" name="ForMonth" value="@(Model == null ? "" : Model.ForMonth)">
                                                <input type="hidden" name="IsUnpaid" value="0">
                                            </div>
                                        </div>

                                    </div>
                                </div>

                            </div>



                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="nav navbar-right">
                               
                                @if (Model != null && Model.PaidDate != null)
                                {
                                <input type="submit" value="Unpaid Salary" id="unpaidSalary" onclick="return ConfirmSaveSalary(1);" name="Search" class="btn btn-squar" />
                                }

                               @if (Model == null || Model.PaidDate == null)
                               {
                                <input type="submit" value="Save Salary" id="paidSalary" onclick="return ConfirmSaveSalary(0);" name="Search" class="btn btn-squar" />
                                }
                            </div>
                        </div>
                    </div>

                </div>
                

            </fieldset>

            <div class="x_panel" id="panel2">
                <div class="x_title sc_panel_header_sm" id="detailDiv">


                    <label class="control-label col-xs-12 sc_panel_label" style="font-size: 12px;" for="last-name">
                        Last Six Month Salary Details
                    </label>
                </div>

                <div class="x_content">

                    <form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">

                        <div class="form-group">
                            <div class="row">
                                <div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered" id="allownceTable1">
                                            <thead>
                                                <tr class="headings">
                                                    <th class="nosort">
                                                        Month
                                                    </th>
                                                    <th class="nosort">
                                                        Paid Date
                                                    </th>
                                                    <th class="nosort">
                                                        Salary Amount
                                                    </th>
                                                    <th class="nosort">
                                                        Misc Withdraws
                                                    </th>
                                                    <th class="nosort">
                                                        Clubbed Sundays
                                                    </th>
                                                    <th class="nosort">
                                                        Sunday(s) Deduction
                                                    </th>
                                                    <th class="nosort">
                                                        Deduction
                                                    </th>
                                                    <th class="nosort">
                                                        Advance Adjustment
                                                    </th>
                                                    <th class="nosort">
                                                        Bonus
                                                    </th>
                                                    <th class="nosort">
                                                        Paid Salary
                                                    </th>

                                                </tr>

                                            </thead>
                                            <tbody style="background-color:white;color:#2A3F54" id="classBody1">
                                                @if (ViewData["history"] != null)
                                                {
                                                    foreach (var item in (IEnumerable<SMS_DAL.StaffSalary>)ViewData["history"])
                                                    {
                                                        <tr>
                                                            
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.ForMonth)
                                                            </td>
                                                            <td>
                                                                @item.PaidDate.Value.ToString().Split(' ')[0]
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.SalaryAmount)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.MiscWithdraw)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.ClubbedSundays)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.SundaysDeduction)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.Deduction)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.AdvanceAdjustment)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.Bonus)
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(modelItem => item.PaidAmount)
                                                            </td>

                                                        </tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </form>
                </div>

            </div>


        }
    </div>
</div>