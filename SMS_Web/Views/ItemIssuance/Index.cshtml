@model SMS_DAL.Item

@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm(Html.BeginForm("SaveItemIssuance", "ItemIssuance", FormMethod.Post, new { @id = "itemIssuanceForm", enctype = "multipart/form-data" })))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset>

        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="x_panel">
                    <div class="x_title sc_panel_header">
                        <label class="nav navbar-left control-label sc_panel_label">Item Issuance</label>
                        <ul class="nav navbar-right panel_toolbox">
                            <li>
                                <label class="control-label col-md-4 col-sm-4 col-xs-12" align="right" for="first-name" style="font-size: 11px;margin-top:5px;">
                                    Order#
                                </label>
                                <div class="col-md-8 col-sm-8 col-xs-12" style="margin-top:2px;">
                                    <div>
                                        <input type="hidden" name="Print" id="Print" class="form-control input-sm" />
                                        <input type="hidden" name="IssuerId" id="IssuerId" class="form-control input-sm" />
                                        <input id="orderId" type="number" value="@ViewData["OrderId"]" name="OrderId" class="form-control input-sm" style="background-color:white" readonly />
                                    </div>
                                </div>
                            </li>
                            <li>
                                <label class="control-label col-md-3 col-sm-3 col-xs-12" align="left" for="first-name" style="font-size: 11px;margin-top:5px;">
                                    Date
                                </label>
                                <div class="col-md-9 col-sm-9 col-xs-12" style="margin-top:2px;">
                                    <div>
                                        <input type="date" name="IssuanceDate" class="form-control input-sm" id="purchaseDate" />
                                    </div>
                                </div>
                            </li>
                        </ul>
                        <div class="clearfix"></div>
                    </div>

                    <div class="x_content">


                        <div hidden="hidden">@Html.ValidationSummary(false)</div>
                        @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@


                        <div class="form-group row">
                            <label class="control-label col-md-6 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Item
                            </label>
                            <label class="control-label col-md-3 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Qty <span class="required" style="color:red;">*</span>
                            </label>
                            <label class="control-label col-md-3 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Unit <span class="required" style="color:red;">*</span>
                            </label>
                        </div>
                        <div class="form-group row" style="margin-top:-10px;">
                           
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>
                                    <input type="text" autocomplete="off" id="ItemNameId" name="ItemNameId" class="form-control input-sm" />
                                </div>
                            </div>

           

                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    <input id="qty" type="number" class="form-control input-sm" />
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    @Html.DropDownList("UnitId", (IEnumerable<SelectListItem>)ViewBag.UnitId, new { @class = "form-control input-sm", @onChange = "myNewFunction(this);" })
                                </div>
                            </div>
                        </div>

                        <div class="ln_solid"></div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="nav navbar-right">
                                <input type="button" value="Add Item" name="Create" class="btn btn-squar" onclick="AddItemPurchaseDetail()" />
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>


        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label">Item Issuance List </label>
                <div class="clearfix"></div>
            </div>

            <div class="x_content">
                <div class="form-group row">
                    <label class="control-label col-md-7 col-sm-7 col-xs-12" align="right" for="first-name" style="font-size: 11px;">
                        Issued To
                    </label>
                    <div class="col-md-5 col-sm-5 col-xs-12">
                        <div>
                            <input type="text" autocomplete="off" id="IssuerNameId" name="IssuerNameId" class="form-control input-sm" value="@ViewData["issuerName"]" />
                        </div>
                    </div>
                </div>

                <div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered" id="classTable">
                            <thead>
                                <tr class="headings">
                                    <th>
                                        Name
                                    </th>
                                    <th>
                                        Qty
                                    </th>
                                    <th>
                                        Unit
                                    </th>
                                    <th width="80px">
                                        Action
                                    </th>

                                </tr>

                            </thead>
                            <tbody style="background-color:white;color:#2A3F54" id="classBody">
                                @if (ViewData["itemIssuance"] != null)
                                {
                                    int i = 0;
                                    foreach (var item in (IEnumerable<SMS_DAL.ViewModel.ItemIssuanceDetailModel>)ViewData["itemIssuance"])
                                    {
                                        <tr id="@("tableRowHis" + i)">
                                          
                                            <td>
                                                @Html.DisplayFor(modelItem => item.ItemName)
                                            </td>
                                            <td align="right">
                                                @Html.DisplayFor(modelItem => item.Quantity)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.UnitName)
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-squar btn-danger btn-xs navbar-right" title="Delete Item" onclick="DeleteItemFromTable(0,@(i++))"> X </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="nav navbar-right" style="margin-right:10px;">
                            <input id="grandQty" type="number" class="form-control input-sm" value="0" style="background-color:white;font-size:15px;font-weight:600;width:150px;text-align:right" readonly />
                        </div>

                        <div class="nav navbar-right" style="margin-top:2px;margin-right:10px;">
                            <label class="control-label" align="right" for="first-name" style="font-size: 11px;">
                                Total Qty:
                            </label>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="ln_solid"></div>
                        <div class="nav navbar-right">
                            <input type="submit" value="Print & Save" name="PrintSave" class="btn btn-squar" onclick="return AddItemDetailInForm(2)" />
                            @if (ViewData["OrderDate"] != null)
                            {
                                <input type="submit" value="Print" name="Print" class="btn btn-squar" onclick="return AddItemDetailInForm(1)" />
                            }
                            <input type="submit" value="Save" name="Save" class="btn btn-squar" onclick="return AddItemDetailInForm(0)" />

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </fieldset>
}
            <style>
                    .txt-squar {
                    }

                    * {
                        box-sizing: border-box;
                    }

                    .autocomplete {
                        /*the container must be positioned relative:*/
                        position: relative;
                        display: inline-block;
                    }

                    input {
                        border: 1px solid gray;
                        background-color: white;
                        /*padding: 10px;*/
                        font-size: 13px;
                    }

                        input[type=text] {
                            background-color: white;
                            width: 100%;
                        }

                    /*input[type=submit] {
                    background-color: DodgerBlue;
                    color: #fff;
                }*/

                    .autocomplete-items {
                        position: absolute;
                        border: 1px solid #d4d4d4;
                        border-bottom: none;
                        border-top: none;
                        z-index: 99;
                        /*position the autocomplete items to be the same width as the container:*/
                        top: 100%;
                        left: 0;
                        right: 0;
                    }

                        .autocomplete-items div {
                            padding: 10px;
                            cursor: pointer;
                            background-color: #fff;
                            border-bottom: 1px solid #d4d4d4;
                        }

                            .autocomplete-items div:hover {
                                /*when hovering an item:*/
                                background-color: #e9e9e9;
                            }

                    .autocomplete-active {
                        /*when navigating through the items using the arrow keys:*/
                        background-color: DodgerBlue !important;
                        color: #ffffff;
                    }
            </style>


            <script>

                function populateErrors()
                {
                    @if (!Html.ViewData.ModelState.IsValid)
        {
            <text> populateValidationErrors()  </text>
        }

                    @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification('Item(s) Issuance is saved succesfully.', 'Success', 'Success') </text>
           }
       else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Item is already added.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification('Unable to Save Item(s) Issuance.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Item.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification('Item is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
                }
                var itemNames = [];
                var selectedUnitName = '';
                var issuerNames = [];
                window.onload = function (e) {
                    populateErrors();
                    $('#purchaseDate').val('@(ViewData["OrderDate"] == null ? DateTime.Now.ToString("yyyy-MM-dd") : ((DateTime)ViewData["OrderDate"]).ToString("yyyy-MM-dd"))');
                    GetItemNames();
                    autocomplete(document.getElementById("ItemNameId"), itemNames);
                    GetIssuerNames();
                    autocomplete(document.getElementById("IssuerNameId"), issuerNames);
                    $("#ItemNameId").blur(function(){
                        EnableUnitDD();
                    });

                    $("#qty").focus(function(){
                        EnableUnitDD();
                    });

                }

                function GetIssuerNames() {
                    var i = 0;
                    @foreach (var item in ViewBag.IssuerNames)
                    {
                        <text>
                        var name = '@item';
                        issuerNames[i++] = name;
                        </text>
                    }
                }

                function calculateTotal()
                {
                    var rate = $("#rate").val();
                    var qty = $("#qty").val();

                    $("#total").val(rate * qty);
                }

                function getItemName()
                {
                    var itemName = $('#ItemNameId').val();
                    itemName = itemName.split('|')[1].trim();

                    return itemName;
                }

                function myNewFunction(sel) {
                    selectedUnitName = sel.options[sel.selectedIndex].text;
                }

                function EnableUnitDD()
                {
                    var unitName = getUnitName();
                    $("select#UnitId option").each(function() { this.selected = (this.text == unitName); });
                    if(unitName == 'Boxes' || unitName == 'Pieces' || unitName == 'Liter' || unitName == 'Kilos')
                    {
                        $('#UnitId').attr('disabled', 'disabled');
                    }
                    else
                    {
                        $('#UnitId').removeAttr('disabled');
                        $("select#UnitId option").each(function() { this.disabled = (this.text == 'Kilos' ||
                            this.text == 'Pieces' || this.text == 'Boxes' || this.text == 'Liter'); });
                    }
                }

                function getUnitName()
                {
                    var itemName = $('#ItemNameId').val();
                    itemName = itemName.split('|')[2].trim();

                    return itemName;
                }

                function AddItemPurchaseDetail()
                {
                    EnableUnitDD();
                    var itemName = getItemName();
                    var qty = $('#qty').val();
                    var unit = selectedUnitName;
                    if(unit.length == 0)
                    {
                        unit = $("#UnitId option:selected").text();
                    }

                    qty = Number(qty).toFixed(2);
                    if(itemName == null || itemName.length == 0)
                    {
                        showNotification('Please enter item name.', 'Error', 'Error')
                    }
                    else if(qty == null || qty.length == 0 || qty == 0)
                    {
                        showNotification('Please enter quantity.', 'Error', 'Error')
                    }
                    else if(IsItemAlreadyAdded(itemName) == true)
                    {
                        showNotification('Item is already added.', 'Error', 'Error')
                    }
                    else
                    {
                        var rowCount = document.getElementById("classTable").rows.length - 1;
                        $('#ItemNameId').val("");
                        $('#qty').val("");
                        var button = '<button type="button" class="btn btn-sm btn-squar btn-danger btn-xs navbar-right" title = "Delete Item" onclick="DeleteItemFromTable(0,'+rowCount+')"> X </button>';
                        var rowData = '<tr id="tableRowHis'+rowCount+'" style="height:35px;"><td>' +itemName+ '</td><td align="right">' +qty+ '</td><td>' +unit+ '</td><td>' +button+ '</td></tr>';
                        $('#classTable tbody').append(rowData);
                        GetGrandTotal();
                    }
                    SetItemFocus();
                    selectedUnitName = '';
                }

                function SetItemFocus()
                {
                    $('#ItemNameId').focus();
                }
                function DeleteItemFromTable(itemId, index)
                {
                    var row = document.getElementById('tableRowHis'+index);
                    row.parentNode.removeChild(row);
                    GetGrandTotal();
                    SetItemFocus();
                }

                function GetIssuerId() {
                    var issuerName = $('#IssuerNameId').val();
                    var id = 0;
                    if (issuerName != null && issuerName.length > 0) {
                        id = issuerName.split('|')[0].trim();
                    }

                    return id;
                }

                function IsItemAlreadyAdded(itemName)
                {
                    var boolFlag = false;
                    var rowCount = document.getElementById("classTable").rows.length;
                    if(rowCount > 1)
                    {
                        for( var i = 1; i < rowCount; i++)
                        {
                            var rowData = document.getElementById("classTable").rows[i].cells;
                            var tblItemName = rowData[0].innerHTML;
                            if(itemName == tblItemName)
                            {
                                boolFlag = true;
                                break;
                            }
                        }

                    }

                    return boolFlag;
                }

                function AddItemDetailInForm(print) {
                    $('#Print').val(print);

                    var rowCount = document.getElementById("classTable").rows.length;
                    var objCount = 0;
                    var issuerId = GetIssuerId();
                    var listName = "itemIssuanceList";
                    if(rowCount == 1)
                    {
                        showNotification('No Items are added in the issuance', 'Error', 'Error');
                        return false;
                    }
                    else if(issuerId == 0)
                    {
                        showNotification('Please enter a Issued to save the purchase', 'Error', 'Error');
                        return false;
                    }
                    else
                    {
                        $('#IssuerId').val(issuerId);

                        for (var i = 1; i < rowCount; i++){
                            var rowData = document.getElementById("classTable").rows[i].cells;
                            debugger
                            var itemName = rowData[0].innerHTML;
                            var qty = Number(rowData[1].innerHTML);
                            var unit = rowData[2].innerHTML;
                            $("#itemIssuanceForm").prepend("<input type='hidden' name='" + listName + "[" + objCount + "].ItemName' value='" + itemName + "'>");
                            $("#itemIssuanceForm").prepend("<input type='hidden' name='" + listName + "[" + objCount + "].Quantity' value='" + qty + "'>");
                            $("#itemIssuanceForm").prepend("<input type='hidden' name='" + listName + "[" + objCount + "].UnitName' value='" + unit + "'>");
                            objCount++;
                        }

                        return true;
                    }
                }

                function GetGrandTotal()
                {
                    var grandTotal = 0;
                    var rowCount = document.getElementById("classTable").rows.length;
                    if(rowCount > 1)
                    {
                        for( var i = 1; i < rowCount; i++)
                        {
                            var rowData = document.getElementById("classTable").rows[i].cells;
                            var total = rowData[1].innerHTML;
                            grandTotal += Number(total);
                        }

                    }
                    $('#grandQty').val(grandTotal);
                }

                function GetItemNames() {
                    var i = 0;
                    @foreach (var item in ViewBag.ItemNames)
        {
            <text>
                    var name = '@item';
                    itemNames[i++] = name;
                    </text>
        }
                }



                function autocomplete(inp, arr) {
                    /*the autocomplete function takes two arguments,
                    the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
                    inp.addEventListener("input", function(e) {
                        var a, b, i, val = this.value;
                        /*close any already open lists of autocompleted values*/
                        closeAllLists();
                        if (!val) { return false;}
                        currentFocus = -1;
                        /*create a DIV element that will contain the items (values):*/
                        a = document.createElement("DIV");
                        a.setAttribute("id", this.id + "autocomplete-list");
                        a.setAttribute("class", "autocomplete-items");
                        /*append the DIV element as a child of the autocomplete container:*/
                        this.parentNode.appendChild(a);
                        /*for each item in the array...*/
                        for (i = 0; i < arr.length; i++) {
                            /*check if the item starts with the same letters as the text field value:*/
                            //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                            if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                                /*create a DIV element for each matching element:*/
                                b = document.createElement("DIV");
                                b.style.fontSize = "12px";
                                /*make the matching letters bold:*/
                                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                b.innerHTML += arr[i].substr(val.length);
                                /*insert a input field that will hold the current array item's value:*/
                                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                /*execute a function when someone clicks on the item value (DIV element):*/
                                b.addEventListener("click", function(e) {
                                    /*insert the value for the autocomplete text field:*/
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    /*close the list of autocompleted values,
                                    (or any other open lists of autocompleted values:*/
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                    /*execute a function presses a key on the keyboard:*/
                    inp.addEventListener("keydown", function(e) {
                        var x = document.getElementById(this.id + "autocomplete-list");
                        if (x) x = x.getElementsByTagName("div");
                        if (e.keyCode == 40) {
                            /*If the arrow DOWN key is pressed,
                            increase the currentFocus variable:*/
                            currentFocus++;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 38) { //up
                            /*If the arrow UP key is pressed,
                            decrease the currentFocus variable:*/
                            currentFocus--;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 13) {
                            /*If the ENTER key is pressed, prevent the form from being submitted,*/
                            e.preventDefault();
                            if (currentFocus > -1) {
                                /*and simulate a click on the "active" item:*/
                                if (x) x[currentFocus].click();
                            }
                        }
                    });
                    function addActive(x) {
                        /*a function to classify an item as "active":*/
                        if (!x) return false;
                        /*start by removing the "active" class on all items:*/
                        removeActive(x);
                        if (currentFocus >= x.length) currentFocus = 0;
                        if (currentFocus < 0) currentFocus = (x.length - 1);
                        /*add class "autocomplete-active":*/
                        x[currentFocus].classList.add("autocomplete-active");
                    }
                    function removeActive(x) {
                        /*a function to remove the "active" class from all autocomplete items:*/
                        for (var i = 0; i < x.length; i++) {
                            x[i].classList.remove("autocomplete-active");
                        }
                    }
                    function closeAllLists(elmnt) {
                        /*close all autocomplete lists in the document,
                        except the one passed as an argument:*/
                        var x = document.getElementsByClassName("autocomplete-items");
                        for (var i = 0; i < x.length; i++) {
                            if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                    /*execute a function when someone clicks in the document:*/
                    document.addEventListener("click", function (e) {
                        closeAllLists(e.target);
                    });
                }

            </script>
