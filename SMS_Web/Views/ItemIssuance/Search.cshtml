@model SMS_DAL.Student

@{
    ViewBag.Title = "Create";
}

<style>
    /*body {
                          padding : 10px ;

                        }*/

    #exTab1 .tab-content {
        color: #73879c;
        background-color: white;
        padding: 5px 15px;
    }

    #exTab2 h3 {
        color: white;
        background-color: #428bca;
        padding: 5px 15px;
    }

    /* remove border radius for the tab */

    #exTab1 .nav-pills > li > a {
        border-radius: 0;
    }

    /* change border radius for the tab , apply corners on top*/

    #exTab3 .nav-pills > li > a {
        border-radius: 4px 4px 0 0;
    }

    #exTab3 .tab-content {
        color: white;
        background-color: #428bca;
        padding: 5px 15px;
    }

    .boxed {
        border: 1px solid #DDDDDD;
        margin-left: -15px;
        margin-right: -15px;
        height: 320px;
    }

    .nav-boxed {
        border: 1px solid #DDDDDD;
    }

    .padded-ends {
        padding-left: 20px;
        padding-right: 20px;
        /*margin-right:20px;*/
    }
</style>

<style>
    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
                    background-color: DodgerBlue;
                    color: #fff;
                }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>


<head>

</head>
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">

            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Search Item Purchase</label>
                @*<ul class="nav navbar-right panel_toolbox">

                    <li>
                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>
                    <li>
                        @*<a class="close-link"><i class="fa fa-close"></i></a>
                    </li>

                </ul>*@

                <div class="nav navbar-right">
                    <input type="button" value="Help" name="Help" onclick="@("window.location.href='" + @Url.Action("Index", "Video", new { id = 2}) + "'");"
                            class="btn sc_help_btn btn-xs" />

                </div>

                <div class="clearfix"></div>
            </div>

            <div class="x_content">


                @using (Html.BeginForm("SearchItemIssuance", "ItemIssuance", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <fieldset>
                        <div class="form-group row">
                            <label class="control-label col-md-2 col-sm-2 col-xs-12" align="left" for="first-name" style="font-size: 11px">
                                From Date
                            </label>

                            <label class="control-label col-md-2 col-sm-2 col-xs-12" align="left" for="first-name" style="font-size: 11px">
                                To Date
                            </label>
                            <label class="control-label col-md-2 col-sm-2 col-xs-12" align="left" for="first-name" style="font-size: 11px">
                                Purchase #
                            </label>

                            <label class="control-label col-md-6 col-sm-6 col-xs-12" align="left" for="first-name" style="font-size: 11px">
                                Item
                            </label>
                        </div>


                        <div class="form-group row">
                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    <input type="date" name="FromDate" class="form-control input-sm" id="fromDate" />

                                </div>
                            </div>

                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    <input type="date" name="ToDate" class="form-control input-sm" id="toDate" />
                                </div>
                            </div>
                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    <input type="number" name="OrderId" class="form-control input-sm" />
                                    <input type="hidden" name="ItemId" id="ItemId" class="form-control input-sm" />
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>
                                    <input type="text" autocomplete="off" id="ItemNameId" name="ItemNameId" class="form-control input-sm" />
                                </div>
                            </div>
                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="nav navbar-right">
                                <input type="submit" value="Find" name="Search" class="btn btn-squar" onclick="return AddItemId()" />

                            </div>
                        </div>
                    </fieldset>
                }
            </div>
        </div>
    </div>
</div>

<div class="row" id="searchPanelData" style="display:none;">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">

            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Item Purchase List</label>

                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                        <table class="table table-striped table-bordered" id="classTable">
                            <thead>
                                <tr>
                                    <th>
                                        Sr No
                                    </th>
                                    <th>
                                        Purchase Date
                                    </th>
                                    <th>
                                        Purchase #
                                    </th>
                                    <th>
                                        System Date
                                    </th>
                                    <th>
                                        Actions
                                    </th>
                                </tr>

                            </thead>
                            <tbody style="background-color:white;color:#2A3F54" id="classBody">
                                @if (ViewData["itemIssuance"] != null)
                                {
                                    int i = 1;
                                    foreach (var item in (IEnumerable<SMS_DAL.ViewModel.ItemIssuanceModel>)ViewData["itemIssuance"])
                                    {
                                        <tr>
                                          
                                            <td>
                                                @(i++)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.IssuanceDate.Value.ToString().Split(' ')[0])
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.OrderId)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.CreatedOn.Value.ToString().Split(' ')[0])
                                            </td>
                                            <td>
                                                @Html.ActionLink(" ", "Index", new { id = item.Id }, new { style = "color: green;font-size: 15px;", title = "View Details", @class = "glyphicon glyphicon-eye-open" })
                                                @Html.ActionLink(" ", "CreatePdf", new { id = item.Id }, new { style = "color: black;font-size: 15px;", title = "Create Pdf", @class = "glyphicon glyphicon-print" })
                                                @*@Html.ActionLink(" ", "Delete", new { id = item.Id }, new { onclick = "return ConfirmDelete('Are you sure you wish to delete this Item Purchase?', " + item.Id + ", 'Item Purchase');", style = "color: darkred;font-size: 15px;", title = "Delete", @class = "glyphicon glyphicon-trash" })*@
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
            </div>
        </div>
    </div>
</div>


<script>

    function populateErrors()
    {
      @if(ViewData["Error"] != null)
      {
          if ((int)@ViewData["Error"] == 420)
          {
              <text> showNotification('Unable to Search Item Issuance.', 'Error', 'Error') </text>
          }
      }
    }


    var itemNames = [];
    window.onload = function (e) {
        $("#classTable").DataTable();
        populateErrors();
        ShowSearchPanel(@((ViewData["itemIssuance"] == null) ? 0 : 1));
        $('#fromDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');
        $('#toDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');
        GetItemNames();
        autocomplete(document.getElementById("ItemNameId"), itemNames);
    }

    function AddItemId()
    {
        var itemId = $('#ItemNameId').val();
        itemId = itemId.split('|')[0].trim();
        $('#ItemId').val(itemId);

        return true;
    }

    function GetItemNames() {
        var i = 0;
                    @foreach (var item in ViewBag.ItemNames)
        {
            <text>
                    var name = '@item';
            itemNames[i++] = name;
            </text>
        }
    }



    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>
