@model SMS_DAL.GradesConfig
@{
    ViewBag.Title = "Index";
    //Layout = "Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Grade @((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "Edit" : "Create")</label>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
                    </li>
                    <li>
                        @*<a class="close-link"><i class="fa fa-close"></i></a>*@
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>

            <div class="x_content">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div hidden="hidden">@Html.ValidationSummary(false)</div>
                    @*@Html.ValidationSummary(true)*@
                    @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
                    <fieldset>
                       
                       
                        <div class="form-group row">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                                Grade <span class="required annotation">*</span>
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>
                                    @Html.TextBoxFor(model => model.Grade, new { @class = "form-control", @id = "txtGrade" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                                Start Range <span class="required annotation">*</span>
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>
                                    @Html.TextBoxFor(model => model.MinRange, new { @class = "form-control", @type="number", @id = "txtMin" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                                End Range <span class="required annotation">*</span>
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>
                                    @Html.TextBoxFor(model => model.MaxRange, new { @class = "form-control", @type = "number", @id = "txtMax" })
                                </div>
                            </div>
                        </div>
                        
                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="col-md-9 col-sm-9 col-xs-12">
                                <div class="nav navbar-right">
                                    <input type="submit" value="Save" name="Create" class="btn btn-squar" onclick="return VerifyInput()"
                                           style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:none" : "display:block") />
                                    <input type="submit" value="Save" name="Update" class="btn btn-squar" onclick="return VerifyInput()"
                                           style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:block" : "display:none") />
                                </div>
                            </div>

                        </div>
                    </fieldset>
                    @*</form>*@
                }
            </div>
        </div>
    </div>
</div>


<script>

    function populateErrors()
    {
        @if (!Html.ViewData.ModelState.IsValid)
        {
            <text> populateValidationErrors()  </text>
        }

        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification('Grade is saved succesfully.', 'Success', 'Success') </text>
           }
       else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Grade is already added.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 110)
           {
               <text> showNotification('Marks range for this grade is overlapped with the marks range of another grade.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification(' Unable to Save Grade.', 'Error', 'Error') </text>
           }
            else if ((int)@ViewData["Error"] == 100)
           {
               <text> showNotification('Term perecentage is exceding from 100.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Grade.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification('Grade is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
    }

    window.onload = function (e) {
        populateErrors();
        $('#classTable').DataTable( {
            paging: false, searching : false
        } );
    }

    function VerifyInput()
    {
        var grade = $('#txtGrade').val();
        var min = $('#txtMin').val();
        var max = $('#txtMax').val();

        if(grade.length == 0)
        {
            showNotification('Please Enter Grade.', 'Error', 'Error')
            return false
        }
        else if(min.length == 0)
        {
            showNotification('Please Enter Start Range.', 'Error', 'Error')
            return false
        }
        else if(max.length == 0)
        {
            showNotification('Please Enter End Range.', 'Error', 'Error')
            return false
        }
        else if(Number(min) < 0)
        {
            showNotification('Min Range must be positive', 'Error', 'Error')
            return false
        }
        else if(Number(max) < 0)
        {
            showNotification('Min Range must be negative', 'Error', 'Error')
            return false
        }
        else if(Number(max) < Number(min))
        {
            showNotification('End Range must be greater than Start Range', 'Error', 'Error')
            return false
        }
        return true
    }

</script>
<div class="x_panel">
    <div class="x_title sc_panel_header">
        <label class="nav navbar-left control-label sc_panel_label" align="left">Grade List </label>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
            </li>

            <li>
                @*<a class="close-link"><i class="fa fa-close"></i></a>*@
            </li>
        </ul>

        <div class="clearfix"></div>
    </div>

    <div class="x_content">

        <div class="form-group">
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="classTable">
                    <thead>
                        <tr class="headings">
                            <th>
                                Grade
                            </th>
                            <th>
                                Start Range
                            </th>
                            <th>
                                End Range
                            </th>
                            <th>
                                Actions
                            </th>

                        </tr>

                    </thead>
                    <tbody style="background-color:white;color:#2A3F54" id="classBody">
                        @if (ViewData["grades"] != null)
                        {
                            foreach (var item in (IEnumerable<SMS_DAL.GradesConfig>)ViewData["grades"])
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Grade)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.MinRange)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.MaxRange)
                                    </td>
                                    <td>
                                        @Html.ActionLink("  ", "Index", new { id = item.Id }, new { style = "color: green;font-size: 15px;", title = "Edit", @class = "glyphicon glyphicon-edit" }) 
                                        @*@Html.ActionLink("Details", "Details", new { id=item.Id }) |*@
                                        @Html.ActionLink("  ", "Delete", new { id = item.Id }, new { onclick = "return ConfirmDelete('Are you sure you wish to delete this Grade?', " + item.Id + ", 'GradesConfig');", style = "color: darkred;font-size: 15px;", title = "Delete", @class = "glyphicon glyphicon-trash" })
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
