@model SMS_DAL.Item

@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label">Item Purchase</label>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
                    </li>
                    <li>
                        @*<a class="close-link"><i class="fa fa-close"></i></a>*@
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>

            <div class="x_content">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div hidden="hidden">@Html.ValidationSummary(false)</div>
                    @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
                    <fieldset>
                      

                        <div class="form-group row">
                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Item
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    <input type="text" autocomplete="off" id="ItemNameId" name="ItemNameId" class="form-control input-sm" />
                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Unit
                            </label>
                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    @Html.DropDownList("UnitId", (IEnumerable<SelectListItem>)ViewBag.UnitId, new { @class = "form-control input-sm" })
                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Qty <span class="required" style="color:red;">*</span>
                            </label>
                            <div class="col-md-1 col-sm-1 col-xs-12">
                                <div>
                                    <input id="qty" type="number" class="form-control input-sm" />
                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Rate <span class="required" style="color:red;">*</span>
                            </label>
                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    <input id="rate" type="number" class="form-control input-sm" />
                                </div>
                            </div>
                            
                        </div>


                        <div class="form-group row">
                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Date 
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    <input type="date" name="PurchaseDate" class="form-control input-sm" id="purchaseDate" style="height:30px;" />
                                </div>
                            </div>

                            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                                Order#
                            </label>
                            <div class="col-md-2 col-sm-2 col-xs-12">
                                <div>
                                    <input id="orderId" type="number" value="@ViewData["OrderId"]" class="form-control input-sm" readonly />
                                </div>
                            </div>

                            <div class="col-md-5 col-sm-5 col-xs-12">
                                <div class="nav navbar-right">
                                    <input type="button" value="Add Item" name="Create" class="btn btn-squar" />
                                </div>
                            </div>

                        </div>
                        
                        <div class="ln_solid"></div>
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            <div class="nav navbar-right">
                                <input type="submit" value="Save" name="Create" class="btn btn-squar"
                                       style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:none;" : "display:block;") />
                                <input type="submit" value="Save" name="Update" class="btn btn-squar"
                                       style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:block;" : "display:none;") />
                            </div>
                        </div>

                    </fieldset>
                    @*</form>*@
                }
            </div>
        </div>
    </div>
</div>
 

<div class="x_panel">
    <div class="x_title sc_panel_header">
        <label class="nav navbar-left control-label sc_panel_label">Items List </label>
        <div class="clearfix"></div>
    </div>

    <div class="x_content">

        <div class="form-group">
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="classTable">
                    <thead>
                        <tr class="headings">
                            <th>
                                Name
                            </th>
                            <th>
                                Unit
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Actions
                            </th>

                        </tr>

                    </thead>
                    <tbody style="background-color:white;color:#2A3F54" id="classBody">
                        @if (ViewData["item"] != null)
                        {
                            foreach (var item in (IEnumerable<SMS_DAL.ViewModel.ItemModel>)ViewData["item"])
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ItemName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.UnitName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ItemDescription)
                                    </td>
                                    <td>
                                        @Html.ActionLink("  ", "Index", new { id = item.Id }, new { style = "color: green; font-size: 20px; margin-left: 10px", title = "Edit", @class = "glyphicon glyphicon-edit" }) 
                                        @*@Html.ActionLink("Details", "Details", new { id=item.Id }) |*@
                                        @Html.ActionLink("  ", "Delete", new { id = item.Id }, new { onclick = "return ConfirmDelete('Are you sure you wish to delete this Item?', " + item.Id + ", 'Item');", style = "color: darkred;font-size: 15px;", title = "Delete", @class = "glyphicon glyphicon-trash" })
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<style>
    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>


<script>

    function populateErrors()
    {
        @if (!Html.ViewData.ModelState.IsValid)
        {
            <text> populateValidationErrors()  </text>
        }

        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification('Item is saved succesfully.', 'Success', 'Success') </text>
           }
       else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Item is already added.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification('Unable to Save Item.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Item.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
       else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification('Item is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
    }
    var itemNames = [];

    window.onload = function (e) {
        populateErrors();
        $('#classTable').DataTable();
        $('#purchaseDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');
        GetItemNames();
        autocomplete(document.getElementById("ItemNameId"), itemNames);
    }

    function GetItemNames() {
        var i = 0;
        @foreach (var item in ViewBag.ItemNames)
        {
            <text>
            var name = '@item';
            itemNames[i++] = name;
            </text>
        }
    }

    
    
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

</script>