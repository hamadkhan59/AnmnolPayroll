@model SMS_DAL.Class

@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Class @((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "Edit" : "Create")</label>
                <div class="nav navbar-right">
                    <input type="button" value="Help" name="Help" onclick="@("window.location.href='" + @Url.Action("Index", "Video", new { id = 10}) + "'");"
                            class="btn sc_help_btn btn-xs" />
                </div>
<div class="clearfix"></div>
</div>

<div class="x_content">

    @using (Html.BeginForm())
               {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
    <fieldset>
       
        <div class="form-group row">
            <label class="control-label col-md-3 col-sm-3 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                Name <span class="required annotation">*</span>
            </label>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <div>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "annotation" })
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-md-3 col-sm-3 col-xs-12" style="font-size: 11px;" align="right" for="last-name">
                Description
            </label>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <div>
                    @Html.TextAreaFor(model => model.Description, 3, 25, new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-3 col-sm-3 col-xs-12">
            </div>
            <div class="col-md-2 col-sm-2 col-xs-12">

                <div>
                    @Html.CheckBoxFor(model => model.IsFinanceAccountOpen, new { @class = "form-control input-sm", @style = "width:15px;height:15px;", id = "cbFinanceAccount", @checked = "checked", @disabled = "true" })
                </div>

                <label class="control-label" align="left" for="last-name" style="font-size: 11px;">
                    Finance Account Open
                </label>
            </div>
            <div class="col-md-3 col-sm-3 col-xs-12">

                <div>
                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-control input-sm", @style = "width:15px;height:15px;"})
                </div>

                <label class="control-label" align="left" for="last-name" style="font-size: 11px;">
                    Active
                </label>
            </div>
        </div>

        

        <div class="ln_solid"></div>
        <div class="form-group">
            
            <div class="col-md-9 col-sm-9 col-xs-12">
                <div class="nav navbar-right">
                    <input type="submit" value="Save" name="Create" class="btn btn-squar"
                           style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:none;" : "display:block;") />
                    <input type="submit" value="Save" name="Update" class="btn btn-squar"
                           style=@((ViewData["Operation"] != null && Convert.ToInt32(ViewData["Operation"]) > 0) ? "display:block;" : "display:none;") />
                 </div>
            </div>
        </div>
    </fieldset>
                 @*</form>*@
               }
</div>
</div>
</div>
</div>


<div class="x_panel">
    <div class="x_title sc_panel_header">
        <label class="nav navbar-left control-label sc_panel_label" align="left">Class List </label>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
            </li>

            <li>
                @*<a class="close-link"><i class="fa fa-close"></i></a>*@
            </li>
        </ul>
        <div class="clearfix"></div>
    </div>

    <div class="x_content">

        <div class="form-group">
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="classTable">
                    <thead>
                        <tr class="headings">
                            <th>
                                <label>Name</label>
                            </th>
                            <th>
                                <label>Description</label>
                            </th>
                            <th>
                                <label> Finance Account Open</label>
                            </th>
                            <th>
                                <label>Status</label>
                            </th>
                            <th>
                                <label>Actions</label>
                            </th>

                        </tr>

                    </thead>
                    <tbody style="background-color:white;color:#2A3F54" id="classBody">
                        @foreach (var item in (IEnumerable<SMS_DAL.Class>)ViewData["class"])
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Description)
                                </td>
                                <td>
                                    @if (item.IsFinanceAccountOpen == false)
                                    {
                                        <p style="color:red;"> No </p>
                                    }
                                    else
                                    {
                                        <p style="color:green;"> Yes </p>
                                    }
                                </td>
                                 <td>
                                    @if (item.IsActive == false)
                                    {
                                        <p style="color:red;"> InActive </p>
                                    }
                                    else
                                    {
                                        <p style="color:green;"> Active </p>
                                    }
                                </td>
                                
                                <td>
                                    @Html.ActionLink("  ", "Index", new { id = item.Id }, new { style = "color: green;font-size: 15px;", title = "Edit", @class = "glyphicon glyphicon-edit" }) 
                                    @Html.ActionLink("  ", "Delete", new { id = item.Id }, new { onclick = "return ConfirmDelete('Are you sure you wish to delete this Class?', "+item.Id+", 'Class');", style = "color: darkred;font-size: 15px;", title = "Delete", @class = "glyphicon glyphicon-trash" })
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>

    function populateErrors()
    {
        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification(' Class is saved succesfully.', 'Success', 'Success') </text>
           }
           else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Class is already added..', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification('nable to Save Class.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Class.', 'Error', 'Error') </text>
           }
            else if ((int)@ViewData["Error"] == 40)
           {
               <text> showNotification('Unable to delete Class, As sections are added to class', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification('Class is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
    }

    $(document).ready(function () {
        $("#classTable").DataTable();
        populateErrors();
        //$('input[autofill="off"]').disableAutofill();
        @if (Model != null && Model.IsFinanceAccountOpen == true)
        {
            <text>
        document.getElementById("cbFinanceAccount").disabled = true;
        </text>
        }
    });
</script>