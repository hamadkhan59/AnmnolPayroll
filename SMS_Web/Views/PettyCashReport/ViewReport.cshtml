@model SMS_DAL.Student

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>

    var financeAccounts = [];

    function ChechkIsReportSelected()
    {
        var reportId = $('#ddlFinanceReports').val();
        if(Number(reportId) <= 0)
        {
            showNotification('Please select a report to view the details.', 'Error', 'Error')
            return false;
        }
        return true;
    }

    $(document).ready(function(){
        $('#fromDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');//.ToString(), "yyyy-MM-dd")Model.DateOfBirth.Value.ToString("yyyy-MM-dd")));
        $('#toDate').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');

        @if(ViewData["Error"] != null)
        {
            if ((int)@ViewData["Error"] == 420)
            {
                <text> showNotification('Unable to fetch report data, please try again later.', 'Error', 'Error') </text>
            }
        }

        GetFinanceAccounts();
        autocomplete(document.getElementById("inuputLedgerAccount"), financeAccounts);

        populateStatus();
        populateJVStatus();
        //hide all filters
        hideAll();
        populateYears();
        populateMonths();
        populateFinanceLevels();
        GetSeccondLvlAccountList();
        //load reports for student module
        $.ajax({
            type: "GET",
            url: AppDetail() + '/api/Common/getReports?moduleId=5',
            contentType: 'application/json',
            success: function (result) {
                $("#ddlFinanceReports").html(result);
            },
            error: function (res) {
                alert('failure: ' + res);
            }
        });

        //on changing report
        $("#ddlFinanceReports").change(function(){
            //hide all initially
            hideAll();
            var rID = $("#ddlFinanceReports").val();
            if(rID == -1)
                return;
            $.ajax({
                type: "GET",
                url: AppDetail() + '/api/Common/getReportFilters?reportId='+ rID,
                contentType: 'application/json',
                success: function (result) {
                    if(result.length ==0)
                        return;

                    debugger;
                    for(var i=0;i<result.length;i++)
                    {
                        var classname="filter" + result[i].FILTER_ID;
                        document.getElementsByClassName(classname)[0].style.display = 'block';
                    }
                },
                error: function (res) {
                    alert('failure: ' + res);
                }
            });

        });

        $("#btnReportExcel").hover (function(){
            SetSession();
        });

        $("#btnReportWord").hover (function(){
            SetSession();
        });

        $("#btnReportPDF").hover (function(){
            SetSession();
        });


    });

    function SetSession()
    {
        debugger;
        var reportModel = {
            reportName : $("#ddlFinanceReports :selected").text(),
            reportId : $('#ddlFinanceReports').val(),
            fromDate : $('#fromDate').val(),
            toDate : $('#toDate').val(),
            financeLevelId : $('#ddlFinanceLevel').val(),
            BankName : $("#payedToBank option:selected").text(),
            CashName : $("#payedToCash option:selected").text(),
            isActiveAccounts : $("#cbActiveAccounts").is(':checked'),
            includeCashWithdrawal : $("#cbIncludeCW").is(':checked'),
            isCashWithdrawalDetailReport : $("#cbDetailReport").is(':checked'),
            firstLevel : $('#firstLvlAccountIdList').val(),
            secondLevel : $('#seccondLvlAccountIdList').val(),
            thirdLevel : $('#thirdLvlAccountIdList').val(),
            fourthLevel : $('#fourthLvlAccountIdList').val(),
            fifthLevel : $('#fifthLvlAccountIdList').val(),
            bankFifthLevel : $('#payedToBank').val(),
            cashFifthLevel : $('#payedToCash').val(),
            entryId : $('#entryIdSearch').val(),
            jvEntryMode : $('#ddlJVMode').val(),
            mode : $('#ddlMode').val(),
            ledgerAccount : $('#inuputLedgerAccount').val()
        }
        debugger;
        $.ajax({
            type: "Post",
            url: AppDetail() + '/api/Common/setFinanceReportSession',
            contentType: 'application/json',
            data: JSON.stringify(reportModel),
            success: function (result) {

            },
            error: function (res) {
                alert('failure: ' + res);
            }
        });
    }

    function hideAll()
    {
        $('.filter1, .filter2, .filter1007, .filter1008, .filter1009, .filter1010, .filter1011, .filter1012, .filter1013, .filter1014, .filter1015, .filter1016, .filter1017, .filter1018, .filter1019, .filter2017, .filter2018').hide();
    }

    function populateYears()
    {

        $.ajax({
            type: "GET",
            url: AppDetail() + '/api/Common/getYears',
            contentType: 'application/json',
            success: function (result) {
                $("#ddlYear").html(result);
            },
            error: function (res) {
                alert('failure: ' + res);
            }
        });


    }
    function populateMonths()
    {
        var options = "";
        options = options + '<option value="' + -1 + '"> All </option>';
        options = options + '<option value="' + 1 + '"> January </option>';
        options = options + '<option value="' + 2 + '"> February </option>';
        options = options + '<option value="' + 3 + '"> March </option>';
        options = options + '<option value="' + 4 + '"> April </option>';
        options = options + '<option value="' + 5 + '"> May </option>';
        options = options + '<option value="' + 6 + '"> June </option>';
        options = options + '<option value="' + 7 + '"> July </option>';
        options = options + '<option value="' + 8 + '"> August </option>';
        options = options + '<option value="' + 9 + '"> September </option>';
        options = options + '<option value="' + 10 + '"> October </option>';
        options = options + '<option value="' + 11 + '"> November </option>';
        options = options + '<option value="' + 12 + '"> December </option>';


        $("#ddlMonths").html(options);
    }

    function populateFinanceLevels()
    {
        var options = "";
        options = options + '<option value="' + 1 + '"> First Level </option>';
        options = options + '<option value="' + 2 + '"> Second Level </option>';
        options = options + '<option value="' + 3 + '"> Third Level </option>';
        options = options + '<option value="' + 4 + '"> Fourth Level </option>';
        options = options + '<option value="' + 5 + '"> Fifth Level </option>';


        $("#ddlFinanceLevel").html(options);
    }


    function populateStatus()
    {
        var options = "";
        options = options + '<option value="' + 0 + '"> Both </option>';
        options = options + '<option value="' + 1 + '"> Debit </option>';
        options = options + '<option value="' + 2 + '"> Credit </option>';
        $("#ddlMode").html(options);
    }

    function populateJVStatus()
    {
        var options = "";
        options = options + '<option value="' + 0 + '"> Both </option>';
        options = options + '<option value="' + 1 + '"> UnCleared </option>';
        options = options + '<option value="' + 2 + '"> Cleared </option>';
        $("#ddlJVMode").html(options);
    }

    function GetSeccondLvlAccountList() {
        var firstLvlAccountId = $('#firstLvlAccountIdList').val();
        $('#seccondLvlAccountIdList').html("");
        $("#seccondLvlAccountIdList").append('<option value="0">All</option>');
        @foreach (var item in (IEnumerable<SMS_DAL.ViewModel.FinanceSeccondLvlAccountModel>)ViewData["seccondLvlAccounts"])
        {
            <text>
        if (firstLvlAccountId == @item.FirstLvlAccountId)
        {
            var id = @(item.Id);
            var name = '@(item.AccountName)';
        $("#seccondLvlAccountIdList").append('<option value='+id+'>'+name+'</option>');
    }
    </text>
    }
    GetThirdLvlAccountList();
    }

    function GetThirdLvlAccountList() {
        var seccondLvlAccountId = $('#seccondLvlAccountIdList').val();
        $('#thirdLvlAccountIdList').html("");
        $("#thirdLvlAccountIdList").append('<option value="0">All</option>');
        @foreach (var item in (IEnumerable<SMS_DAL.ViewModel.FinanceThirdLvlAccountModel>)ViewData["thirdLvlAccounts"])
        {
            <text>
        if (seccondLvlAccountId == @item.SeccondLvlAccountId)
        {
            var id = @(item.Id);
            var name = '@(item.AccountName)';
        $("#thirdLvlAccountIdList").append('<option value='+id+'>'+name+'</option>');
    }
    </text>
    }

    GetFourthLvlAccountList();
    }

    function GetFourthLvlAccountList() {
        var thirdLvlAccountIdList = $('#thirdLvlAccountIdList').val();
        $('#fourthLvlAccountIdList').html("");
        $("#fourthLvlAccountIdList").append('<option value="0">All</option>');
        @foreach (var item in (IEnumerable<SMS_DAL.ViewModel.FinanceFourthLvlAccountModel>)ViewData["fourthLvlAccounts"])
        {
            <text>
        if (thirdLvlAccountIdList == @item.ThirdLvlAccountId)
        {
            var id = @(item.Id);
            var name = '@(item.AccountName)';
        $("#fourthLvlAccountIdList").append('<option value='+id+'>'+name+'</option>');
    }
    </text>
        }

        GetFifthLvlAccountList();
    }

    function GetFifthLvlAccountList() {
        var fourthLvlAccountIdList = $('#fourthLvlAccountIdList').val();
        $('#fifthLvlAccountIdList').html("");
        $("#fifthLvlAccountIdList").append('<option value="0">All</option>');
        @foreach (var item in (IEnumerable<SMS_DAL.ViewModel.FinanceFifthLvlAccountModel>)ViewData["fifthLvlAccounts"])
        {
            <text>
        if (fourthLvlAccountIdList == @item.FourthLvlAccountId)
        {
            var id = @(item.Id);
            var name = '@(item.AccountName)';
        $("#fifthLvlAccountIdList").append('<option value='+id+'>'+name+'</option>');
    }
    </text>
        }
    }

    function GetFinanceAccounts() {
        var i = 0;
        @foreach (var item in (IEnumerable<SMS_DAL.ViewModel.FinanceFifthLvlAccountModel>)ViewData["fifthLvlAccounts"])
        {
            <text>
                var name = '@(item.AccountName)';
                financeAccounts[i++] = name;
            </text>
        }
    }

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>



<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label">Finance Report</label>
                <ul class="nav navbar-right panel_toolbox">

                    <li>
                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
                    </li>
                    <li>
                        @*<a class="close-link"><i class="fa fa-close"></i></a>*@
                    </li>

                </ul>

                <div class="clearfix"></div>
            </div>

            <div class="x_content">


                <div class="row">
                    <div class="col-md-12">
                        <select class="form-control input-sm " id="ddlFinanceReports"></select>
                    </div>
                </div>


                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)


                    <div class=" row">

                        <div class="col-md-6 filter1" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12" style="font-size: 11px;">
                                From Date
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12">
                                <div>
                                    <input type="date" name="fromDate" class="form-control input-sm" id="fromDate" />
                                </div>
                            </div>

                        </div>
                        
                        <div class="col-md-6 filter2" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-8 col-xs-12" style="font-size: 11px;">
                                To Date
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12">
                                <div>
                                    <input type="date" name="toDate" class="form-control input-sm" id="toDate" />
                                </div>
                            </div>

                        </div>
                        
                        <div class="col-md-6 filter1007" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Finance Level
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    <select class="form-control input-sm" id="ddlFinanceLevel"></select>
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter2018" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Ledger Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div class="autocomplete" style="width:100%;">
                                    @*@Html.TextBoxFor(model => model.FatherName, new { @class = "form-control input-sm", id = "fatherNameSearch" })*@
                                    <input type="text" name="LedgerAccount" id="inuputLedgerAccount" class="form-control input-sm" />
                                </div>
                            </div>

                        </div>


                        <div class="col-md-6 filter1008" style="margin : 10px 0px">
                            <div class="col-md-1 col-sm-1 col-xs-12 ">
                                <div>
                                    <input type="checkbox" class="form-control input-sm" style="width:20px;height:20px;" id="cbActiveAccounts" />
                                </div>
                            </div>
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;margin-top:5px;">
                                Active Accounts
                            </label>
                        </div>

                        <div class="col-md-6 filter1009" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Category
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFirstLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FirstLvlAccountId, "All", new { @class = "form-control input-sm", @onchange = "GetSeccondLvlAccountList();", id = "firstLvlAccountIdList" })
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1010" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Main Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceSeccondLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.SeccondLvlAccountId, new { @class = "form-control input-sm", @onchange = "GetThirdLvlAccountList();", id = "seccondLvlAccountIdList" })
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1011" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Sub Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceThirdLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.ThirdLvlAccountId, new { @class = "form-control input-sm", @onchange = "GetFourthLvlAccountList();", id = "thirdLvlAccountIdList" })
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1012" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Sub Sub Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFourthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FourthLvlAccountId, new { @class = "form-control input-sm", @onchange = "GetFifthLvlAccountList();", id = "fourthLvlAccountIdList" })
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1013" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Detail Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFifthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FifthLvlAccountId, new { @class = "form-control input-sm", id = "fifthLvlAccountIdList" })
                                </div>
                            </div>

                        </div>

                        @*<div class="col-md-6 filter2018" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Ledger Account
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFifthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FifthLvlAccountId, new { @class = "form-control input-sm" })
                                </div>
                            </div>

                        </div>*@


                        <div class="col-md-6 filter1017" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Payed To
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFourthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.BankFourthLvlAccountId, "All", new { Name = "CreditFourthLvl", @class = "form-control input-sm", id = "payedToBank" })
                                    @*@Html.DropDownList("FinanceFifthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FifthLvlAccountId, new { @class = "form-control input-sm", id = "fifthLvlAccountIdList" })*@
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 filter2017" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Payed To
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    @Html.DropDownList("FinanceFourthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.CashFourthLvlAccountId, "All", new { Name = "CreditFourthLvl", @class = "form-control input-sm", id = "payedToCash" })
                                    @*@Html.DropDownList("FinanceFifthLvlAccount.Id", (IEnumerable<SelectListItem>)ViewBag.FifthLvlAccountId, new { @class = "form-control input-sm", id = "fifthLvlAccountIdList" })*@
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 filter1014" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12" style="font-size: 11px;">
                                Entry Id
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12">
                                <div>
                                    @Html.TextBoxFor(model => model.RollNumber, new { @class = "form-control input-sm", id = "entryIdSearch" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6 filter1015" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                Entry Mode
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    <select class="form-control input-sm" id="ddlMode"></select>
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1016" style="margin : 10px 0px">
                            <label class="control-label col-md-4 col-sm-4 col-xs-12 " style="font-size: 11px;">
                                JV Entry Mode
                            </label>
                            <div class="col-md-8 col-sm-8 col-xs-12 ">
                                <div>
                                    <select class="form-control input-sm" id="ddlJVMode"></select>
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6 filter1018" style="margin : 10px 0px">
                            <div class="col-md-1 col-sm-1 col-xs-12 ">
                                <div>
                                    <input type="checkbox" class="form-control input-sm" style="width:20px;height:20px;" id="cbIncludeCW" />
                                </div>
                            </div>
                            <label class="control-label col-md-5 col-sm-5 col-xs-12 " style="font-size: 11px;margin-top:5px;">
                                Include Cash Withdrawal
                            </label>
                        </div>

                        <div class="col-md-6 filter1019" style="margin : 10px 0px">
                            <div class="col-md-1 col-sm-1 col-xs-12 ">
                                <div>
                                    <input type="checkbox" class="form-control input-sm" style="width:20px;height:20px;" id="cbDetailReport" />
                                </div>
                            </div>
                            <label class="control-label col-md-5 col-sm-5 col-xs-12 " style="font-size: 11px;margin-top:5px;">
                                Detail Report
                            </label>
                        </div>

                    </div>

                    <div class="ln_solid"></div>
                    <div class="form-group">
                        <div class="nav navbar-right row" style="margin-right:-4%">
                            <div>@*<a href="@Url.Action("Export")" class="btn btn-info" target="_blank" id="btnReport"> Report PDF </a>*@</div>
                            <div class="col-md-4"><a href="@Url.Action("ExportExcel")" onclick="return ChechkIsReportSelected();" class="btn btn-squar" target="_blank" id="btnReportExcel"> Download As Excel </a></div>
                            <div class="col-md-4"><a href="@Url.Action("ExportWord")" onclick="return ChechkIsReportSelected();" class="btn btn-squar" target=" _blank" id="btnReportWord"> Download As Word </a></div>
                            <div class="col-md-3"><a href="@Url.Action("ExportPdf")" onclick="return ChechkIsReportSelected();" class="btn btn-squar" target=" _blank" id="btnReportPDF"> View As PDF </a></div>
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<style>
    

    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }

    /*body {
         /*font: 16px Arial; */
    }*/

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>