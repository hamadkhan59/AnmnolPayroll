
@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Instant Misc Withdraw</label>
                <div class="nav navbar-right">
                    <input type="button" value="Help" name="Help" onclick="@("window.location.href='" + @Url.Action("Index", "Video", new { id = 10}) + "'");"
                           class="btn sc_help_btn btn-xs" />
                </div>
<div class="clearfix"></div>
</div>

<div class="x_content">

    @using (Html.BeginForm())
               {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
    <fieldset>
        <div class="form-group row">
            <label class="control-label col-md-3 col-sm-3 col-xs-12" align="right" for="first-name">
            </label>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <div >
                    
</div>
            </div>
        </div>


        <div class="form-group row">
            <label class="control-label col-md-2 col-sm-2 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                Staff Id <span class="required annotation">*</span>
            </label>
            <div class="col-md-4 col-sm-4 col-xs-12">
                <div>
                    <input type="text" id="StaffNameId" name="StaffNameId" class="form-control input-sm" />
                    <input type="hidden" id="StaffId" name="StaffId" class="form-control input-sm" />
                </div>
            </div>

            <label class="control-label col-md-1 col-sm-1 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                Pay From <span class="required annotation">*</span>
            </label>

            <div class="col-md-1 col-sm-1 col-xs-12">
                <div>
                    @Html.DropDownList("AccountTypeId", (IEnumerable<SelectListItem>)ViewBag.AccountTypeId, new { @class = "form-control input-sm", @onchange = "ChangeAccountType()", id = "accountTypeId" })
                </div>
            </div>

            <div class="col-md-3 col-sm-3 col-xs-12">
                <div>
                    <select class="form-control input-sm" name="FinanceAccountId" id="financeAccountId"></select>
                    <input type="hidden" name="BranchId" class="form-control input-sm" id="BranchId" value="@ViewData["branchId"]">
                </div>
            </div>

        </div>

        <div class="form-group row">
            <label class="control-label col-md-2 col-sm-2 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                Withdraw Amount <span class="required annotation">*</span>
            </label>
            <div class="col-md-4 col-sm-4 col-xs-12">
                <div>
                    <input type="number" id="WithdrawAmount" name="AdvanceAmount" class="form-control input-sm" />
                </div>
            </div>

            <label class="control-label col-md-1 col-sm-1 col-xs-12" align="left" for="first-name" style="font-size: 11px;">
                Year/Month
            </label>
            <div class="col-md-2 col-sm-2 col-xs-12">
                <div>
                    @Html.DropDownList("YearId", (IEnumerable<SelectListItem>)ViewBag.YearId, new { @class = "form-control input-sm", id = "yearIdSearch" })

                </div>
            </div>
            <div class="col-md-2 col-sm-2 col-xs-12">
                <div>
                    @Html.DropDownList("MonthId", (IEnumerable<SelectListItem>)ViewBag.MonthId, new { @class = "form-control input-sm", id = "monthIdSearch" })
                </div>
            </div>

        </div>

        <div class="form-group row">
            <label class="control-label col-md-2 col-sm-2 col-xs-12" style="font-size: 11px;" align="right" for="last-name">
                Description
            </label>
            <div class="col-md-4 col-sm-4 col-xs-12">
                <div>
                    <input type="number" id="Description" name="Description" class="form-control input-sm" />

                </div>
            </div>

        </div>

        <div class="ln_solid"></div>
        <div class="form-group">
            <div class="col-md-10 col-sm-10 col-xs-12">
            </div>
            <div class="col-md-2 col-sm-2 col-xs-12">
                <input type="submit" value="Save" name="CreateInstantWithDraw" class="btn btn-squar"
                       onclick="return VerifyInputs('SaveAdvance');" id="SaveAdvance" />
            </div>
        </div>
    </fieldset>
                 @*</form>*@
               }
</div>
</div>
</div>
</div>


<style>
    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>



<script>

    var staffNames = [];
    function populateErrors()
    {
        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 2)
           {
               <text> showNotification(' Misc Withdraw is saved succesfully.', 'Success', 'Success') </text>
           }
           else if ((int)@ViewData["Error"] == 1)
           {
               <text> showNotification('The Name Field is Required.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 11)
           {
               <text> showNotification('Class is already added..', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification('Unable to save Misc Withdraw.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 3)
           {
               <text> showNotification('Unable to delete Class.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 4)
           {
               <text> showNotification('Class is deleted succesfully.', 'Success', 'Success') </text>
           }
       }
    }

    $(document).ready(function () {
        populateErrors();
        GetStaffNames();
        ChangeAccountType();
        var d = new Date();
        var month = d.getMonth();
        $("#monthIdSearch").get(0).selectedIndex = month;
        autocomplete(document.getElementById("StaffNameId"), staffNames);

        //$('#classTable').DataTable({ paging : false, info : false, searching : false});
    });

    function GetStaffNames() {
        var i = 0;
        @foreach (var item in ViewBag.StaffNames)
        {
            <text>
        var name = '@item';
            staffNames[i++] = name;
            </text>
        }
    }

    function VerifyInputs(buttonId)
    {
        var accountTypeId = $("#accountTypeId").val();
        var amount = $("#WithdrawAmount").val();
        var staffIdText = $("#StaffNameId").val();

        if(staffIdText == null || staffIdText.length == 0)
        {
            showNotification('Please enter Staff Id to continue.', 'Error', 'Error');
            return false;
        }

        if(amount == null || amount.length == 0)
        {
            showNotification('Please add withdraw amount to continue.', 'Error', 'Error');
            return false;
        }
        else
        {
            if(Number(amount) <= 0)
            {
                showNotification('Please withdraw amount must be greater than zero.', 'Error', 'Error')
                return false;
            }
        }

        var staffId = parseInt(staffIdText.split(" ")[0]);
        $("#StaffId").val(staffId);

        //ConfirmAction('Are you sure, you want to save the Misc Withdraw?', buttonId);
        getStaffPaymentApproval(staffId, 'Are you sure, you want to save the Misc Withdraw?', buttonId);

        return false;
    }


    function ChangeAccountType()
    {
        var accountTypeId = $("#accountTypeId").val();
        var branchId = $("#BranchId").val();
        if(accountTypeId == 1)
        {
            accountTypeId = 13;
        }
        else
        {
            accountTypeId = 14;
        }

        $.ajax({
            type: "GET",
            url: AppDetail() + '/api/Common/getFinanceAccount?typeId=' + accountTypeId + '&&branchId=' + branchId + '&&isLoadAll=0',
            contentType: 'application/json',
            success: function (result) {
                $("#financeAccountId").html(result);
            },
            error: function (res) {
                showNotification('Unable to load account', 'Error', 'Error')
            }
        });
    }

    
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>