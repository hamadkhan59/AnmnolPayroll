@model List<SMS_DAL.ViewModel.StaffAttendanceDetailModel>

@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title sc_panel_header">
                <label class="nav navbar-left control-label sc_panel_label" align="left">Find Attendance</label>
                <div class="nav navbar-right">
                    <input type="button" value="Help" name="Help" onclick="@("window.location.href='" + @Url.Action("Index", "Video", new { id = 10}) + "'");"
                           class="btn sc_help_btn btn-xs" />
                </div>
                <div class="clearfix"></div>
            </div>

            <div class="x_content">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
                    <fieldset>
                        <div class="form-group row">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" align="right" for="first-name">
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div>

                                </div>
                            </div>
                        </div>


                        <div class="form-group row">
                           
                            <label class="control-label col-md-1 col-sm-1 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                                Date <span class="required annotation">*</span>
                            </label>
                            <div class="col-md-3 col-sm-3 col-xs-12">
                                <div>
                                    <input type="date" name="AttandanceDate" class="form-control input-sm" id="dob" />
                                </div>
                            </div>

                             <label class="control-label col-md-1 col-sm-1 col-xs-12" style="font-size: 11px;" align="right" for="first-name">
                                Staff Id <span class="required annotation">*</span>
                            </label>
                            <div class="col-md-7 col-sm-7 col-xs-12">
                                <div>
                                    <input type="text" id="StaffNameId" name="StaffNameId" class="form-control input-sm" />
                                    <input type="hidden" id="StaffId" name="StaffId" class="form-control input-sm" />
                                </div>
                            </div>

                           

                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="col-md-11 col-sm-11 col-xs-12">
                            </div>
                            <div class="col-md-1 col-sm-1 col-xs-12">
                                <input type="submit" value="Search" name="LoadAttendanceDetail" class="btn btn-squar" 
                                        onclick="return VerifyInputs();" />
                            </div>
                        </div>
                    </fieldset>
                    @*</form>*@
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @*<form id="demo-form2" data-parsley-validate="" class="form-horizontal form-label-left" novalidate="">*@
            <fieldset>

                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="x_panel">
                            <div class="x_title sc_panel_header">
                                <label class="nav navbar-left control-label sc_panel_label" align="left">Adjust Attendance</label>
                                <ul class="nav navbar-right panel_toolbox">
                                    <li>
                                        @*<a class="collapse-link"><i class="fa fa-chevron-up"></i></a>*@
                                    </li>
                                    <li>
                                        @*<a class="close-link"><i class="fa fa-close"></i></a>*@
                                    </li>
                                </ul>
                                <i class="fa fa-plus nav navbar-right fa-2x" style="margin-top:5px;margin-right:20px;" align="right" onclick="AddRowInTable()"></i>
                                <div class="col-md-3 nav navbar-right" style="margin-top:2px;">
                                    <select class="form-control input-sm" name="StatusId">
                                        <option value="1" selected>Present</option>
                                        <option value="2">Absent</option>
                                    </select> 
                                </div>
                                

                                <div class="clearfix"></div>
                                <input type="hidden" id="AttendanceId" name="AttendanceId" value="@ViewData["AttendanceId"]" />
                            </div>
                            <div class="x_content">

                                <div class="table-responsive">

                                    <div class="form-group">
                                        <div class="table-responsive">
                                            <table class="table table-striped table-bordered" id="classTable">
                                                <thead>
                                                    <tr class="headings">
                                                        <th class="column-title">
                                                            Time In
                                                        </th>
                                                        <th class="column-title">
                                                            Time Out
                                                        </th>
                                                        <th class="column-title">
                                                        </th>
                                                    </tr>

                                                </thead>
                                                <tbody style="background-color:white;color:#2A3F54" id="classBody">
                                                    @if (Model != null && Model.Count > 0)
                                                    {
                                                        for (int i = 0; i < Model.Count; i++)
                                                        {
                                                            <tr id="@("_"+@Model[i].Id)">
                                                                <td>
                                                                    <input type="hidden" id="DetailIds" name="DetailIds" value="@Model[i].Id" />
                                                                    <input type="time" name="startTimes" value="@(Model[i].TimeIn == null ? "09:00" : Model[i].TimeIn)" />
                                                                </td>
                                                                <td>
                                                                    <input type="time" name="endTimes" value="@(Model[i].TimeOut == null ? "09:00" : Model[i].TimeOut)" />
                                                                </td>
                                                                <td>
                                                                    <i class="fa fa-remove fa-lg" align="right" style="color:red" onclick="deleteAttendanceDetail(@Model[i].Id, '@("#_"+@Model[i].Id)')"></i>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>

                                            </table>
                                        </div>

                                    </div>
                                    <div>
                                        @*<div class="ln_solid"></div>*@
                                        <div class="nav navbar-right">
                                            <input type="submit" value="Save" id="saveStaffAttendanceDetail" onclick="return ConfirmAction('Are you sure, you want to submit the staff attendance?', 'saveStaffAttendanceDetail');" name="saveStaffAttendanceDetail" class="btn btn-squar" />
                                        </div>
                                    </div>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>

            </fieldset>

            @*</form>*@
        }
    </div>
</div>

<style>
    .txt-squar {
    }

    * {
        box-sizing: border-box;
    }

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid gray;
        background-color: white;
        /*padding: 10px;*/
        font-size: 13px;
    }

        input[type=text] {
            background-color: white;
            width: 100%;
        }

    /*input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }*/

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>



<script>

    var staffNames = [];
    var count = 0;
    function populateErrors()
    {
        @if(ViewData["Error"] != null)
       {
           if ((int)@ViewData["Error"] == 100)
           {
               <text> showNotification(' Attendance Detail is saved succesfully.', 'Success', 'Success') </text>
           }
           else if ((int)@ViewData["Error"] == 420)
           {
               <text> showNotification('Unable to save Attendance Detail.', 'Error', 'Error') </text>
           }
           else if ((int)@ViewData["Error"] == 10)
           {
               <text> showNotification('Please load any staff attebdance to save.', 'Error', 'Error') </text>
           }
            else if ((int)@ViewData["Error"] == 12)
           {
               <text> showNotification('No detail is added to save.', 'Error', 'Error') </text>
           }
            else if ((int)@ViewData["Error"] == 120)
           {
               <text> showNotification('Attendnace date must be less than the current date.', 'Error', 'Error') </text>
           }
       }
    }

    $(document).ready(function () {
        populateErrors();
        GetStaffNames();
        autocomplete(document.getElementById("StaffNameId"), staffNames);
        $('#dob').val('@(DateTime.Now.ToString("yyyy-MM-dd"))');
    });

    function VerifyInputs()
    {
        var staffIdText = $("#StaffNameId").val();

        if(staffIdText == null || staffIdText.length == 0)
        {
            showNotification('Please enter Staff Id to continue.', 'Error', 'Error');
            return false;
        }

        var staffId = parseInt(staffIdText.split(" ")[0]);
        $("#StaffId").val(staffId);

        return true;
    }

    function GetStaffNames() {
        var i = 0;
        @foreach (var item in ViewBag.StaffNames)
        {
            <text>
        var name = '@item';
        staffNames[i++] = name;
        </text>
        }
    }


    function deleteAttendanceDetail(attendanceId, id) {

        if(attendanceId > 0)
        {
            $.ajax({
                url: AppDetail() + '/StaffAttendanceAdjustment/DeleteAttendanceDetail',
                type: 'Get',
                contentType: 'application/json',
                dataType: 'json',
                data: { 'attendnaceDetailId': attendanceId },
                statusCode: {
                    200: function (data) {
                    },
                    500: function () {
                    }
                },
            });
        }
        $(id).remove();
        //$("#__0").remove();
    }

    function AddRowInTable()
    {
        var detailId = '<tr id="__'+count+'"><td><input type="hidden" id="DetailIds" name="DetailIds" value="0" />';
        var timeIn = '<input type="time" name="startTimes" value="09:00"  /></td>';
        var timeOut = '<td><input type="time" name="endTimes" value="09:00"  /> </td>';
        var remove = '<td><i class="fa fa-remove fa-lg" align="right" style="color:red" onclick="deleteAttendanceDetail(0, \'#__'+count+'\')"></i></td></tr>';

        var row = detailId + timeIn + timeOut + remove;
        $("#classTable").find('tbody').append(row);
        count++;
    }

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                //if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {indexOf('nice')
                if (arr[i].toUpperCase().indexOf(val.toUpperCase()) !== -1) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.style.fontSize = "12px";
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>