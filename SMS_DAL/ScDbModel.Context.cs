//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMS_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SC_WEBEntities2 : DbContext
    {
        public SC_WEBEntities2()
            : base("name=SC_WEBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccountType> AccountTypes { get; set; }
        public DbSet<Activity> Activities { get; set; }
        public DbSet<ActivityMark> ActivityMarks { get; set; }
        public DbSet<ActivityMarksDetail> ActivityMarksDetails { get; set; }
        public DbSet<AdmissionType> AdmissionTypes { get; set; }
        public DbSet<AllowLeave> AllowLeaves { get; set; }
        public DbSet<Allownce> Allownces { get; set; }
        public DbSet<AnnualCharge> AnnualCharges { get; set; }
        public DbSet<AppUser> AppUsers { get; set; }
        public DbSet<ArreartHistory> ArreartHistories { get; set; }
        public DbSet<Attandance> Attandances { get; set; }
        public DbSet<AttendanceRequest> AttendanceRequests { get; set; }
        public DbSet<AttendanceRequestDetail> AttendanceRequestDetails { get; set; }
        public DbSet<AttendanceRequestStatu> AttendanceRequestStatus { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<BankAccount> BankAccounts { get; set; }
        public DbSet<BehaviourCategory> BehaviourCategories { get; set; }
        public DbSet<BehaviourParameter> BehaviourParameters { get; set; }
        public DbSet<BioMatrixCount> BioMatrixCounts { get; set; }
        public DbSet<Branch> Branches { get; set; }
        public DbSet<Challan> Challans { get; set; }
        public DbSet<ChallanFeeHeadDetail> ChallanFeeHeadDetails { get; set; }
        public DbSet<ChallanStudentDetail> ChallanStudentDetails { get; set; }
        public DbSet<ChapterTopic> ChapterTopics { get; set; }
        public DbSet<CLASS_LEVEL> CLASS_LEVEL { get; set; }
        public DbSet<Class> Classes { get; set; }
        public DbSet<ClassSection> ClassSections { get; set; }
        public DbSet<DailyDairy> DailyDairies { get; set; }
        public DbSet<DailyTest> DailyTests { get; set; }
        public DbSet<DailyTestsDetail> DailyTestsDetails { get; set; }
        public DbSet<DateSheet> DateSheets { get; set; }
        public DbSet<DateSheetConfig> DateSheetConfigs { get; set; }
        public DbSet<Designation> Designations { get; set; }
        public DbSet<DesignationCatagory> DesignationCatagories { get; set; }
        public DbSet<DirectoryViewOption> DirectoryViewOptions { get; set; }
        public DbSet<Exam> Exams { get; set; }
        public DbSet<ExamPaper> ExamPapers { get; set; }
        public DbSet<ExamResult> ExamResults { get; set; }
        public DbSet<ExamTerm> ExamTerms { get; set; }
        public DbSet<ExamType> ExamTypes { get; set; }
        public DbSet<ExtraChargesHistory> ExtraChargesHistories { get; set; }
        public DbSet<FeeArrearsDetail> FeeArrearsDetails { get; set; }
        public DbSet<FeeBalance> FeeBalances { get; set; }
        public DbSet<FeeHead> FeeHeads { get; set; }
        public DbSet<FeeIncrementHistory> FeeIncrementHistories { get; set; }
        public DbSet<FeeIncrementHistoryDetail> FeeIncrementHistoryDetails { get; set; }
        public DbSet<FILTER> FILTERs { get; set; }
        public DbSet<FinanceFifthLvlAccount> FinanceFifthLvlAccounts { get; set; }
        public DbSet<FinanceFirstLvlAccount> FinanceFirstLvlAccounts { get; set; }
        public DbSet<FinanceFourthLvlAccount> FinanceFourthLvlAccounts { get; set; }
        public DbSet<FinanceMode> FinanceModes { get; set; }
        public DbSet<FinanceSeccondLvlAccount> FinanceSeccondLvlAccounts { get; set; }
        public DbSet<FinanceThirdLvlAccount> FinanceThirdLvlAccounts { get; set; }
        public DbSet<Fine> Fines { get; set; }
        public DbSet<Gender> Genders { get; set; }
        public DbSet<Grade> Grades { get; set; }
        public DbSet<GradesConfig> GradesConfigs { get; set; }
        public DbSet<GroupPermission> GroupPermissions { get; set; }
        public DbSet<Head> Heads { get; set; }
        public DbSet<IssueChalanDetail> IssueChalanDetails { get; set; }
        public DbSet<IssueChallanConfig> IssueChallanConfigs { get; set; }
        public DbSet<IssuedChallan> IssuedChallans { get; set; }
        public DbSet<JournalEntryCreditDetail> JournalEntryCreditDetails { get; set; }
        public DbSet<JournalEntryDebitDetail> JournalEntryDebitDetails { get; set; }
        public DbSet<JournalVoucher> JournalVouchers { get; set; }
        public DbSet<LateInCount> LateInCounts { get; set; }
        public DbSet<LeavingReason> LeavingReasons { get; set; }
        public DbSet<LeavingStatu> LeavingStatus { get; set; }
        public DbSet<MeritalStatu> MeritalStatus { get; set; }
        public DbSet<MonthlyType> MonthlyTypes { get; set; }
        public DbSet<Month> Months { get; set; }
        public DbSet<PaymentHistory> PaymentHistories { get; set; }
        public DbSet<PaymentMethod> PaymentMethods { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<PreviousStudyHistory> PreviousStudyHistories { get; set; }
        public DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public DbSet<RegisterCourse> RegisterCourses { get; set; }
        public DbSet<Relegion> Relegions { get; set; }
        public DbSet<RemarksConfig> RemarksConfigs { get; set; }
        public DbSet<REPORT_FILTERS> REPORT_FILTERS { get; set; }
        public DbSet<REPORT> REPORTS { get; set; }
        public DbSet<ResultType> ResultTypes { get; set; }
        public DbSet<SACPaidCatalog> SACPaidCatalogs { get; set; }
        public DbSet<SaleOrder> SaleOrders { get; set; }
        public DbSet<SchoolConfig> SchoolConfigs { get; set; }
        public DbSet<Section> Sections { get; set; }
        public DbSet<Session> Sessions { get; set; }
        public DbSet<SessionSubject> SessionSubjects { get; set; }
        public DbSet<SessionUser> SessionUsers { get; set; }
        public DbSet<SmsConfig> SmsConfigs { get; set; }
        public DbSet<SmsEventParam> SmsEventParams { get; set; }
        public DbSet<SmsEvent> SmsEvents { get; set; }
        public DbSet<SmsHistory> SmsHistories { get; set; }
        public DbSet<SmsMessage> SmsMessages { get; set; }
        public DbSet<SmsParam> SmsParams { get; set; }
        public DbSet<SmsVender> SmsVenders { get; set; }
        public DbSet<Staff> Staffs { get; set; }
        public DbSet<StaffAdvance> StaffAdvances { get; set; }
        public DbSet<StaffAllownce> StaffAllownces { get; set; }
        public DbSet<StaffAttandance> StaffAttandances { get; set; }
        public DbSet<StaffAttandancePolicy> StaffAttandancePolicies { get; set; }
        public DbSet<StaffAttendanceDetail> StaffAttendanceDetails { get; set; }
        public DbSet<StaffAttendanceLog> StaffAttendanceLogs { get; set; }
        public DbSet<StaffAttendanceRequest> StaffAttendanceRequests { get; set; }
        public DbSet<StaffAttendanceRequestDetail> StaffAttendanceRequestDetails { get; set; }
        public DbSet<StaffBehaviour> StaffBehaviours { get; set; }
        public DbSet<StaffBehaviourCategory> StaffBehaviourCategories { get; set; }
        public DbSet<StaffBehaviourParameter> StaffBehaviourParameters { get; set; }
        public DbSet<StaffDegree> StaffDegrees { get; set; }
        public DbSet<StaffHoliday> StaffHolidays { get; set; }
        public DbSet<StaffMiscWithdraw> StaffMiscWithdraws { get; set; }
        public DbSet<StaffPaymentApproval> StaffPaymentApprovals { get; set; }
        public DbSet<StaffSalary> StaffSalaries { get; set; }
        public DbSet<StaffSalaryIncrementHistory> StaffSalaryIncrementHistories { get; set; }
        public DbSet<StaffType> StaffTypes { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<StudentAdmissionCharge> StudentAdmissionCharges { get; set; }
        public DbSet<StudentAttendanceStatu> StudentAttendanceStatus { get; set; }
        public DbSet<StudentBehaviour> StudentBehaviours { get; set; }
        public DbSet<StudentDocument> StudentDocuments { get; set; }
        public DbSet<StudentExtraCharge> StudentExtraCharges { get; set; }
        public DbSet<StudentExtraChargesDetail> StudentExtraChargesDetails { get; set; }
        public DbSet<StudentInquiry> StudentInquiries { get; set; }
        public DbSet<StudentPerChallan> StudentPerChallans { get; set; }
        public DbSet<SubjectChapter> SubjectChapters { get; set; }
        public DbSet<Subject> Subjects { get; set; }
        public DbSet<SystemConfig> SystemConfigs { get; set; }
        public DbSet<TermChapter> TermChapters { get; set; }
        public DbSet<TestStatu> TestStatus { get; set; }
        public DbSet<TimeTable> TimeTables { get; set; }
        public DbSet<TransportCharge> TransportCharges { get; set; }
        public DbSet<TransportDriver> TransportDrivers { get; set; }
        public DbSet<TransportDriverStop> TransportDriverStops { get; set; }
        public DbSet<TransportStop> TransportStops { get; set; }
        public DbSet<UserGroup> UserGroups { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<WeeklyType> WeeklyTypes { get; set; }
        public DbSet<Year> Years { get; set; }
        public DbSet<YoutubeVideo> YoutubeVideos { get; set; }
        public DbSet<ClassResult> ClassResults { get; set; }
        public DbSet<DocumentType> DocumentTypes { get; set; }
        public DbSet<FinanceAccountLevel> FinanceAccountLevels { get; set; }
        public DbSet<ItemSale> ItemSales { get; set; }
        public DbSet<ItemStock> ItemStocks { get; set; }
        public DbSet<ItemVendor> ItemVendors { get; set; }
        public DbSet<JournalEntrySummary> JournalEntrySummaries { get; set; }
        public DbSet<PreviousGrade> PreviousGrades { get; set; }
        public DbSet<JournalEntry> JournalEntries { get; set; }
        public DbSet<Vendor> Vendors { get; set; }
        public DbSet<Item> Items { get; set; }
        public DbSet<ItemUnit> ItemUnits { get; set; }
        public DbSet<ItemPurchaseDetail> ItemPurchaseDetails { get; set; }
        public DbSet<ItemPurchase> ItemPurchases { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Extra_Charges(Nullable<int> classId, Nullable<int> sectionId, Nullable<int> chargesAmount, Nullable<int> feeHeadId, string rollNO, Nullable<int> extraChargesId, string forMonth, Nullable<int> branchId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var chargesAmountParameter = chargesAmount.HasValue ?
                new ObjectParameter("chargesAmount", chargesAmount) :
                new ObjectParameter("chargesAmount", typeof(int));
    
            var feeHeadIdParameter = feeHeadId.HasValue ?
                new ObjectParameter("feeHeadId", feeHeadId) :
                new ObjectParameter("feeHeadId", typeof(int));
    
            var rollNOParameter = rollNO != null ?
                new ObjectParameter("rollNO", rollNO) :
                new ObjectParameter("rollNO", typeof(string));
    
            var extraChargesIdParameter = extraChargesId.HasValue ?
                new ObjectParameter("extraChargesId", extraChargesId) :
                new ObjectParameter("extraChargesId", typeof(int));
    
            var forMonthParameter = forMonth != null ?
                new ObjectParameter("ForMonth", forMonth) :
                new ObjectParameter("ForMonth", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Extra_Charges", classIdParameter, sectionIdParameter, chargesAmountParameter, feeHeadIdParameter, rollNOParameter, extraChargesIdParameter, forMonthParameter, branchIdParameter);
        }
    
        public virtual int sp_Extra_Charges_Delete(Nullable<int> classId, Nullable<int> sectionId, Nullable<int> feeHeadId, string rollNO, string forMonth, Nullable<int> branchId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var feeHeadIdParameter = feeHeadId.HasValue ?
                new ObjectParameter("feeHeadId", feeHeadId) :
                new ObjectParameter("feeHeadId", typeof(int));
    
            var rollNOParameter = rollNO != null ?
                new ObjectParameter("rollNO", rollNO) :
                new ObjectParameter("rollNO", typeof(string));
    
            var forMonthParameter = forMonth != null ?
                new ObjectParameter("ForMonth", forMonth) :
                new ObjectParameter("ForMonth", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Extra_Charges_Delete", classIdParameter, sectionIdParameter, feeHeadIdParameter, rollNOParameter, forMonthParameter, branchIdParameter);
        }
    
        public virtual int sp_Get_Session_Result(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year, Nullable<int> branchId)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_Session_Result", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<sp_Get_Student_Result_Result> sp_Get_Student_Result(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Student_Result_Result>("sp_Get_Student_Result", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Income_Statement(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Income_Statement", fromDateParameter, toDateParameter, branchIdParameter);
        }
    
        public virtual int sp_Increment_Fee(Nullable<int> classId, Nullable<int> sectionId, Nullable<int> incrementAmount, string feeHead, Nullable<int> percentageIncrement, Nullable<int> branchId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var incrementAmountParameter = incrementAmount.HasValue ?
                new ObjectParameter("IncrementAmount", incrementAmount) :
                new ObjectParameter("IncrementAmount", typeof(int));
    
            var feeHeadParameter = feeHead != null ?
                new ObjectParameter("feeHead", feeHead) :
                new ObjectParameter("feeHead", typeof(string));
    
            var percentageIncrementParameter = percentageIncrement.HasValue ?
                new ObjectParameter("PercentageIncrement", percentageIncrement) :
                new ObjectParameter("PercentageIncrement", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Increment_Fee", classIdParameter, sectionIdParameter, incrementAmountParameter, feeHeadParameter, percentageIncrementParameter, branchIdParameter);
        }
    
        public virtual int sp_Increment_Salary(Nullable<int> desginationId, Nullable<int> staffId, Nullable<int> incrementAmount, Nullable<int> allowncesAmount)
        {
            var desginationIdParameter = desginationId.HasValue ?
                new ObjectParameter("DesginationId", desginationId) :
                new ObjectParameter("DesginationId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var incrementAmountParameter = incrementAmount.HasValue ?
                new ObjectParameter("IncrementAmount", incrementAmount) :
                new ObjectParameter("IncrementAmount", typeof(int));
    
            var allowncesAmountParameter = allowncesAmount.HasValue ?
                new ObjectParameter("allowncesAmount", allowncesAmount) :
                new ObjectParameter("allowncesAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Increment_Salary", desginationIdParameter, staffIdParameter, incrementAmountParameter, allowncesAmountParameter);
        }
    
        public virtual int sp_JournalEntries(Nullable<int> firstLvlId, Nullable<int> secondLvlId, Nullable<int> thirdLvlId, Nullable<int> fourthLvlId, Nullable<int> fifthLvlId, Nullable<int> mode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> entryId, Nullable<int> branchId)
        {
            var firstLvlIdParameter = firstLvlId.HasValue ?
                new ObjectParameter("FirstLvlId", firstLvlId) :
                new ObjectParameter("FirstLvlId", typeof(int));
    
            var secondLvlIdParameter = secondLvlId.HasValue ?
                new ObjectParameter("SecondLvlId", secondLvlId) :
                new ObjectParameter("SecondLvlId", typeof(int));
    
            var thirdLvlIdParameter = thirdLvlId.HasValue ?
                new ObjectParameter("ThirdLvlId", thirdLvlId) :
                new ObjectParameter("ThirdLvlId", typeof(int));
    
            var fourthLvlIdParameter = fourthLvlId.HasValue ?
                new ObjectParameter("FourthLvlId", fourthLvlId) :
                new ObjectParameter("FourthLvlId", typeof(int));
    
            var fifthLvlIdParameter = fifthLvlId.HasValue ?
                new ObjectParameter("FifthLvlId", fifthLvlId) :
                new ObjectParameter("FifthLvlId", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("entryId", entryId) :
                new ObjectParameter("entryId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_JournalEntries", firstLvlIdParameter, secondLvlIdParameter, thirdLvlIdParameter, fourthLvlIdParameter, fifthLvlIdParameter, modeParameter, fromDateParameter, toDateParameter, entryIdParameter, branchIdParameter);
        }
    
        public virtual int sp_JVJournalEntries(Nullable<int> firstLvlId, Nullable<int> secondLvlId, Nullable<int> thirdLvlId, Nullable<int> fourthLvlId, Nullable<int> fifthLvlId, Nullable<int> mode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> entryId, Nullable<int> branchId)
        {
            var firstLvlIdParameter = firstLvlId.HasValue ?
                new ObjectParameter("FirstLvlId", firstLvlId) :
                new ObjectParameter("FirstLvlId", typeof(int));
    
            var secondLvlIdParameter = secondLvlId.HasValue ?
                new ObjectParameter("SecondLvlId", secondLvlId) :
                new ObjectParameter("SecondLvlId", typeof(int));
    
            var thirdLvlIdParameter = thirdLvlId.HasValue ?
                new ObjectParameter("ThirdLvlId", thirdLvlId) :
                new ObjectParameter("ThirdLvlId", typeof(int));
    
            var fourthLvlIdParameter = fourthLvlId.HasValue ?
                new ObjectParameter("FourthLvlId", fourthLvlId) :
                new ObjectParameter("FourthLvlId", typeof(int));
    
            var fifthLvlIdParameter = fifthLvlId.HasValue ?
                new ObjectParameter("FifthLvlId", fifthLvlId) :
                new ObjectParameter("FifthLvlId", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("entryId", entryId) :
                new ObjectParameter("entryId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("branchId", branchId) :
                new ObjectParameter("branchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_JVJournalEntries", firstLvlIdParameter, secondLvlIdParameter, thirdLvlIdParameter, fourthLvlIdParameter, fifthLvlIdParameter, modeParameter, fromDateParameter, toDateParameter, entryIdParameter, branchIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Increment_Salary1(Nullable<int> desginationId, Nullable<int> staffId, Nullable<int> incrementAmount, Nullable<int> allowncesAmount)
        {
            var desginationIdParameter = desginationId.HasValue ?
                new ObjectParameter("DesginationId", desginationId) :
                new ObjectParameter("DesginationId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var incrementAmountParameter = incrementAmount.HasValue ?
                new ObjectParameter("IncrementAmount", incrementAmount) :
                new ObjectParameter("IncrementAmount", typeof(int));
    
            var allowncesAmountParameter = allowncesAmount.HasValue ?
                new ObjectParameter("allowncesAmount", allowncesAmount) :
                new ObjectParameter("allowncesAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Increment_Salary1", desginationIdParameter, staffIdParameter, incrementAmountParameter, allowncesAmountParameter);
        }
    
        public virtual int sp_PrceedCurrentDayAttendance(Nullable<int> status, Nullable<System.DateTime> attendanceDate)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("attendanceDate", attendanceDate) :
                new ObjectParameter("attendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrceedCurrentDayAttendance", statusParameter, attendanceDateParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual int spSessionResult(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year, Nullable<int> branchId)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSessionResult", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter, branchIdParameter);
        }
    
        public virtual int spSessionResultAccumulative(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year, Nullable<int> branchId)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSessionResultAccumulative", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<spStudentResult_Result> spStudentResult(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spStudentResult_Result>("spStudentResult", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spStudentResultAccumulative_Result> spStudentResultAccumulative(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spStudentResultAccumulative_Result>("spStudentResultAccumulative", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spTranscriptResult_Result> spTranscriptResult(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTranscriptResult_Result>("spTranscriptResult", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<spTranscriptResultAccumulative_Result> spTranscriptResultAccumulative(Nullable<int> classSectionId, Nullable<int> termId, Nullable<int> examTypeId, Nullable<int> studentId, string year)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("termId", termId) :
                new ObjectParameter("termId", typeof(int));
    
            var examTypeIdParameter = examTypeId.HasValue ?
                new ObjectParameter("ExamTypeId", examTypeId) :
                new ObjectParameter("ExamTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTranscriptResultAccumulative_Result>("spTranscriptResultAccumulative", classSectionIdParameter, termIdParameter, examTypeIdParameter, studentIdParameter, yearParameter);
        }
    
        public virtual int sp_Class_Sequence(Nullable<int> classSectionId)
        {
            var classSectionIdParameter = classSectionId.HasValue ?
                new ObjectParameter("ClassSectionId", classSectionId) :
                new ObjectParameter("ClassSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Class_Sequence", classSectionIdParameter);
        }
    
        public virtual int sp_CorrectPaymentHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CorrectPaymentHistory");
        }
    
        public virtual int sp_Increment_Salary2(Nullable<int> desginationId, Nullable<int> staffId, Nullable<int> incrementAmount, Nullable<int> allowncesAmount)
        {
            var desginationIdParameter = desginationId.HasValue ?
                new ObjectParameter("DesginationId", desginationId) :
                new ObjectParameter("DesginationId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var incrementAmountParameter = incrementAmount.HasValue ?
                new ObjectParameter("IncrementAmount", incrementAmount) :
                new ObjectParameter("IncrementAmount", typeof(int));
    
            var allowncesAmountParameter = allowncesAmount.HasValue ?
                new ObjectParameter("allowncesAmount", allowncesAmount) :
                new ObjectParameter("allowncesAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Increment_Salary2", desginationIdParameter, staffIdParameter, incrementAmountParameter, allowncesAmountParameter);
        }
    }
}
